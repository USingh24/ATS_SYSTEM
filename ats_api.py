# -*- coding: utf-8 -*-
"""ATS_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJ8sefW1OEHntu3U3GotilQlKUKev-rd
"""

skills_dict={
    "web speed optimization": [
        "web performance"
    ],
    "web performance": [
        "web performance"
    ],
    "web optimization": [
        "web performance"
    ],
    "site performance": [
        "web performance"
    ],
    "web performance tuning": [
        "web performance"
    ],
    "client side development": [
        "frontend development"
    ],
    "front-end development": [
        "frontend development"
    ],
    "front end dev": [
        "frontend development"
    ],
    "frontend engineering": [
        "frontend development"
    ],
    "front-end dev": [
        "frontend development"
    ],
    "frontend dev": [
        "frontend development"
    ],
    "client-side development": [
        "frontend development"
    ],
    "front end development": [
        "frontend development"
    ],
    "front-end engineering": [
        "frontend development"
    ],
    "frontend development": [
        "frontend development"
    ],
    "web development": [
        "web development"
    ],
    "web application development": [
        "web development"
    ],
    "web dev": [
        "web development"
    ],
    "web app development": [
        "web development"
    ],
    "web engineering": [
        "web development"
    ],
    "website development": [
        "web development"
    ],
    "web programming": [
        "web development"
    ],
    "ui dev": [
        "user interface development"
    ],
    "user interface development": [
        "user interface development"
    ],
    "ui engineering": [
        "user interface development"
    ],
    "ui development": [
        "user interface development"
    ],
    "interface development": [
        "user interface development"
    ],
    "user interface engineering": [
        "user interface development"
    ],
    "ux dev": [
        "user experience development"
    ],
    "user experience engineering": [
        "user experience development"
    ],
    "user experience development": [
        "user experience development"
    ],
    "ux development": [
        "user experience development"
    ],
    "ux engineering": [
        "user experience development"
    ],
    "hypertext markup language": [
        "html"
    ],
    "html": [
        "html"
    ],
    "html5": [
        "html"
    ],
    "cascading style sheets": [
        "css"
    ],
    "css": [
        "css"
    ],
    "css3": [
        "css"
    ],
    "javascript": [
        "javascript"
    ],
    "vanilla js": [
        "javascript"
    ],
    "es7": [
        "javascript"
    ],
    "vanilla javascript": [
        "javascript"
    ],
    "three.js": [
        "javascript"
    ],
    "es6": [
        "javascript"
    ],
    "es5": [
        "javascript"
    ],
    "ecmascript": [
        "javascript"
    ],
    "js": [
        "javascript"
    ],
    "node.js": [
        "javascript"
    ],
    "node": [
        "javascript"
    ],
    "phaser.js": [
        "javascript"
    ],
    "babylon.js": [
        "javascript"
    ],
    "typescript": [
        "typescript"
    ],
    "ts": [
        "typescript"
    ],
    "typed javascript": [
        "typescript"
    ],
    "reactjs": [
        "react"
    ],
    "react router": [
        "react"
    ],
    "react native": [
        "react"
    ],
    "react": [
        "react"
    ],
    "react framework": [
        "react"
    ],
    "react-js": [
        "react"
    ],
    "react.js": [
        "react"
    ],
    "angular material": [
        "angular"
    ],
    "ng": [
        "angular"
    ],
    "angular": [
        "angular"
    ],
    "angular 13": [
        "angular"
    ],
    "angular mobile": [
        "angular"
    ],
    "angular framework": [
        "angular"
    ],
    "angularjs": [
        "angular"
    ],
    "angular 12": [
        "angular"
    ],
    "ionic angular": [
        "angular"
    ],
    "angular.js": [
        "angular"
    ],
    "vue": [
        "vue"
    ],
    "vuejs": [
        "vue"
    ],
    "vue-native": [
        "vue"
    ],
    "vue framework": [
        "vue"
    ],
    "vue 3": [
        "vue"
    ],
    "vuetify": [
        "vue"
    ],
    "vue.js": [
        "vue"
    ],
    "vuex": [
        "vue"
    ],
    "nuxt": [
        "vue"
    ],
    "svelte": [
        "svelte"
    ],
    "svelte.js": [
        "svelte"
    ],
    "svelte framework": [
        "svelte"
    ],
    "svelte native": [
        "svelte"
    ],
    "sapper": [
        "svelte"
    ],
    "next.js": [
        "next.js"
    ],
    "next.js framework": [
        "next.js"
    ],
    "nextjs api": [
        "next.js"
    ],
    "nextjs": [
        "next.js"
    ],
    "next js": [
        "next.js"
    ],
    "next-js": [
        "next.js"
    ],
    "nuxtjs": [
        "nuxt.js"
    ],
    "nuxt.js": [
        "nuxt.js"
    ],
    "nuxt js": [
        "nuxt.js"
    ],
    "nuxt-js": [
        "nuxt.js"
    ],
    "nuxt framework": [
        "nuxt.js"
    ],
    "jQuery": [
        "jquery"
    ],
    "jquery.js": [
        "jquery"
    ],
    "jquery": [
        "jquery"
    ],
    "bootstrap 4": [
        "bootstrap"
    ],
    "bootstrap5": [
        "bootstrap"
    ],
    "bootstrap": [
        "bootstrap"
    ],
    "bootstrap css": [
        "bootstrap"
    ],
    "bootstrap framework": [
        "bootstrap"
    ],
    "tailwind css": [
        "tailwind"
    ],
    "tailwind": [
        "tailwind"
    ],
    "tailwindcss": [
        "tailwind"
    ],
    "material ui": [
        "material ui"
    ],
    "material design": [
        "material ui"
    ],
    "mui framework": [
        "material ui"
    ],
    "material-ui": [
        "material ui"
    ],
    "mui": [
        "material ui"
    ],
    "chakra": [
        "chakra ui"
    ],
    "chakra-ui": [
        "chakra ui"
    ],
    "chakra ui": [
        "chakra ui"
    ],
    "gatsbyjs": [
        "gatsby"
    ],
    "gatsby": [
        "gatsby"
    ],
    "gatsby.js": [
        "gatsby"
    ],
    "ember": [
        "ember"
    ],
    "ember framework": [
        "ember"
    ],
    "ember.js": [
        "ember"
    ],
    "backbone.js": [
        "backbone"
    ],
    "backbone": [
        "backbone"
    ],
    "backbone framework": [
        "backbone"
    ],
    "redux-persist": [
        "redux"
    ],
    "redux toolkit": [
        "redux"
    ],
    "redux-saga": [
        "redux"
    ],
    "redux": [
        "redux"
    ],
    "redux state management": [
        "redux"
    ],
    "redux.js": [
        "redux"
    ],
    "react-redux": [
        "redux"
    ],
    "state management mobx": [
        "mobx"
    ],
    "mobx-react": [
        "mobx"
    ],
    "mobx": [
        "mobx"
    ],
    "mobx-state-tree": [
        "mobx"
    ],
    "mobx.js": [
        "mobx"
    ],
    "apollo client": [
        "apollo"
    ],
    "apollo graphql": [
        "apollo"
    ],
    "apollo": [
        "apollo"
    ],
    "axios.js": [
        "axios"
    ],
    "axios promise": [
        "axios"
    ],
    "axios": [
        "axios"
    ],
    "http client axios": [
        "axios"
    ],
    "webpack bundler": [
        "webpack"
    ],
    "webpack": [
        "webpack"
    ],
    "js bundler": [
        "webpack"
    ],
    "vite bundler": [
        "vite"
    ],
    "vite.js": [
        "vite"
    ],
    "vite": [
        "vite"
    ],
    "rollup": [
        "rollup"
    ],
    "rollup.js": [
        "rollup"
    ],
    "rollup bundler": [
        "rollup"
    ],
    "parcel": [
        "parcel"
    ],
    "parcel bundler": [
        "parcel"
    ],
    "parcel.js": [
        "parcel"
    ],
    "node package manager": [
        "npm"
    ],
    "npm": [
        "npm"
    ],
    "npmjs": [
        "npm"
    ],
    "yarn package manager": [
        "yarn"
    ],
    "yarn": [
        "yarn"
    ],
    "pnpm package manager": [
        "pnpm"
    ],
    "pnpm": [
        "pnpm"
    ],
    "pnpmjs": [
        "pnpm"
    ],
    "sass css": [
        "sass"
    ],
    "preprocessor sass": [
        "sass"
    ],
    "scss": [
        "sass"
    ],
    "sass": [
        "sass"
    ],
    "preprocessor less": [
        "less"
    ],
    "less": [
        "less"
    ],
    "less css": [
        "less"
    ],
    "postcss": [
        "postcss"
    ],
    "postcss.js": [
        "postcss"
    ],
    "postcss plugin": [
        "postcss"
    ],
    "jest.js": [
        "jest"
    ],
    "jestjs": [
        "jest"
    ],
    "jest": [
        "jest"
    ],
    "jest testing": [
        "jest"
    ],
    "mocha testing": [
        "mocha"
    ],
    "mocha": [
        "mocha"
    ],
    "mocha.js": [
        "mocha"
    ],
    "cypress testing": [
        "cypress"
    ],
    "cypress.io": [
        "cypress"
    ],
    "cypress": [
        "cypress"
    ],
    "playwright": [
        "playwright"
    ],
    "playwright testing": [
        "playwright"
    ],
    "angular e2e": [
        "protractor"
    ],
    "e2e protractor": [
        "protractor"
    ],
    "protractor": [
        "protractor"
    ],
    "styled components js": [
        "styled-components"
    ],
    "styled-components": [
        "styled-components"
    ],
    "css-in-js": [
        "styled-components"
    ],
    "styled components": [
        "styled-components"
    ],
    "emotion": [
        "emotion"
    ],
    "emotion.js": [
        "emotion"
    ],
    "emotion css": [
        "emotion"
    ],
    "formik": [
        "formik"
    ],
    "formik.js": [
        "formik"
    ],
    "react forms formik": [
        "formik"
    ],
    "react-hook-form": [
        "react-hook-form"
    ],
    "react form validation": [
        "react-hook-form"
    ],
    "hook form": [
        "react-hook-form"
    ],
    "react hook form": [
        "react-hook-form"
    ],
    "d3": [
        "d3.js"
    ],
    "d3.js": [
        "d3.js"
    ],
    "data-driven documents": [
        "d3.js"
    ],
    "chart.js": [
        "chart.js"
    ],
    "chart": [
        "chart.js"
    ],
    "charting library": [
        "chart.js"
    ],
    "3d javascript library": [
        "three.js"
    ],
    "3d graphics library": [
        "three.js"
    ],
    "three": [
        "three.js"
    ],
    "threejs": [
        "three.js"
    ],
    "three js webgl": [
        "three.js"
    ],
    "framer motion": [
        "framer motion"
    ],
    "framer": [
        "framer motion"
    ],
    "framer.js": [
        "framer motion"
    ],
    "framer-motion": [
        "framer motion"
    ],
    "greensock": [
        "gsap"
    ],
    "gsap.js": [
        "gsap"
    ],
    "gsap": [
        "gsap"
    ],
    "green sock animation": [
        "gsap"
    ],
    "lodash": [
        "lodash"
    ],
    "utility library lodash": [
        "lodash"
    ],
    "lodash.js": [
        "lodash"
    ],
    "date library moment": [
        "moment.js"
    ],
    "moment.js": [
        "moment.js"
    ],
    "moment": [
        "moment.js"
    ],
    "webpack-dev-server": [
        "webpack-dev-server"
    ],
    "webpack dev server": [
        "webpack-dev-server"
    ],
    "webpack server": [
        "webpack-dev-server"
    ],
    "webpack development server": [
        "webpack-dev-server"
    ],
    "storybook": [
        "storybook"
    ],
    "ui components storybook": [
        "storybook"
    ],
    "storybook.js": [
        "storybook"
    ],
    "testing-library": [
        "testing library"
    ],
    "testing library js": [
        "testing library"
    ],
    "rtl": [
        "testing library"
    ],
    "testing library": [
        "testing library"
    ],
    "react testing library": [
        "testing library"
    ],
    "modular css": [
        "css-modules"
    ],
    "css-modules": [
        "css-modules"
    ],
    "css modules": [
        "css-modules"
    ],
    "babel.js": [
        "babel"
    ],
    "babel": [
        "babel"
    ],
    "javascript transpiler": [
        "babel"
    ],
    "babel webpack loader": [
        "babel-loader"
    ],
    "babel loader": [
        "babel-loader"
    ],
    "babel-loader": [
        "babel-loader"
    ],
    "twin macro": [
        "twin.macro"
    ],
    "tailwind css-in-js": [
        "twin.macro"
    ],
    "twin.macro": [
        "twin.macro"
    ],
    "dynamodb": [
        "aws"
    ],
    "simple queue service": [
        "aws"
    ],
    "sagemaker ml service": [
        "aws"
    ],
    "aws sns": [
        "aws"
    ],
    "aws sagemaker": [
        "aws"
    ],
    "aws cloud": [
        "aws"
    ],
    "ec2": [
        "aws"
    ],
    "cdn cloudfront": [
        "aws"
    ],
    "sagemaker": [
        "aws"
    ],
    "aws": [
        "aws"
    ],
    "cloudfront": [
        "aws"
    ],
    "elastic kubernetes service": [
        "aws"
    ],
    "simple storage service": [
        "aws"
    ],
    "cloudwatch": [
        "aws"
    ],
    "elastic compute cloud": [
        "aws"
    ],
    "s3": [
        "aws"
    ],
    "eks": [
        "aws"
    ],
    "simple notification service": [
        "aws"
    ],
    "serverless lambda": [
        "aws"
    ],
    "nosql aws dynamodb": [
        "aws"
    ],
    "dynamo db": [
        "aws"
    ],
    "aws cloudfront": [
        "aws"
    ],
    "monitoring cloudwatch": [
        "aws"
    ],
    "aws cloudwatch": [
        "aws"
    ],
    "aws services": [
        "aws"
    ],
    "lambda": [
        "aws"
    ],
    "amazon": [
        "aws"
    ],
    "aws lambda": [
        "aws"
    ],
    "aws sqs": [
        "aws"
    ],
    "athena query engine": [
        "aws"
    ],
    "aws athena": [
        "aws"
    ],
    "athena": [
        "aws"
    ],
    "rds": [
        "aws"
    ],
    "amazon web services": [
        "aws"
    ],
    "sqs": [
        "aws"
    ],
    "aws eks": [
        "aws"
    ],
    "sns": [
        "aws"
    ],
    "relational database service": [
        "aws"
    ],
    "azure": [
        "azure"
    ],
    "azure blob": [
        "azure"
    ],
    "virtual machines": [
        "azure"
    ],
    "workflow logic apps": [
        "azure"
    ],
    "active directory": [
        "azure"
    ],
    "azure devops": [
        "azure"
    ],
    "application gateway": [
        "azure"
    ],
    "blob storage": [
        "azure"
    ],
    "blob service": [
        "azure"
    ],
    "microsoft azure": [
        "azure"
    ],
    "azure vm": [
        "azure"
    ],
    "k8s on azure": [
        "azure"
    ],
    "app gateway": [
        "azure"
    ],
    "logic apps": [
        "azure"
    ],
    "azure kubernetes service": [
        "azure"
    ],
    "cosmos db": [
        "azure"
    ],
    "serverless azure": [
        "azure"
    ],
    "azure ad": [
        "azure"
    ],
    "azure event hub": [
        "azure"
    ],
    "vm azure": [
        "azure"
    ],
    "azure app service": [
        "azure"
    ],
    "event stream azure": [
        "azure"
    ],
    "azure gateway": [
        "azure"
    ],
    "functions": [
        "azure"
    ],
    "event hub": [
        "azure"
    ],
    "cosmos database": [
        "azure"
    ],
    "data factory": [
        "azure"
    ],
    "azure cloud": [
        "azure"
    ],
    "data pipelines": [
        "azure"
    ],
    "azure active directory": [
        "azure"
    ],
    "aks": [
        "azure"
    ],
    "azure data factory": [
        "azure"
    ],
    "azure cosmos db": [
        "azure"
    ],
    "azure functions": [
        "azure"
    ],
    "azure logic apps": [
        "azure"
    ],
    "app service": [
        "azure"
    ],
    "bq": [
        "gcp"
    ],
    "google pubsub": [
        "gcp"
    ],
    "serverless functions": [
        "gcp"
    ],
    "gcp": [
        "gcp"
    ],
    "google datastore": [
        "gcp"
    ],
    "pub/sub": [
        "gcp"
    ],
    "google stackdriver": [
        "gcp"
    ],
    "cloud storage": [
        "gcp"
    ],
    "gcp functions": [
        "gcp"
    ],
    "nosql datastore": [
        "gcp"
    ],
    "kubernetes engine": [
        "gcp"
    ],
    "cloud run": [
        "gcp"
    ],
    "gke": [
        "gcp"
    ],
    "gcp monitoring": [
        "gcp"
    ],
    "google compute engine": [
        "gcp"
    ],
    "google cloud run": [
        "gcp"
    ],
    "containerized cloud run": [
        "gcp"
    ],
    "cloud functions": [
        "gcp"
    ],
    "google cloud platform": [
        "gcp"
    ],
    "stackdriver": [
        "gcp"
    ],
    "google bigquery": [
        "gcp"
    ],
    "compute engine": [
        "gcp"
    ],
    "pubsub": [
        "gcp"
    ],
    "google kubernetes engine": [
        "gcp"
    ],
    "google cloud": [
        "gcp"
    ],
    "gcp firebase": [
        "gcp"
    ],
    "google cloud storage": [
        "gcp"
    ],
    "gce": [
        "gcp"
    ],
    "gcs": [
        "gcp"
    ],
    "bigquery": [
        "gcp"
    ],
    "firebase": [
        "gcp"
    ],
    "firebase backend": [
        "gcp"
    ],
    "datastore": [
        "gcp"
    ],
    "docker containers": [
        "docker"
    ],
    "docker images": [
        "docker"
    ],
    "docker hub": [
        "docker"
    ],
    "docker compose": [
        "docker"
    ],
    "docker-compose": [
        "docker"
    ],
    "docker": [
        "docker"
    ],
    "kubernetes clusters": [
        "kubernetes"
    ],
    "kubernetes": [
        "kubernetes"
    ],
    "k8s": [
        "kubernetes"
    ],
    "kubernetes orchestration": [
        "kubernetes"
    ],
    "kubernetes management": [
        "kubernetes"
    ],
    "iac terraform": [
        "terraform"
    ],
    "infrastructure as code terraform": [
        "terraform"
    ],
    "terraform": [
        "terraform"
    ],
    "ansible scripts": [
        "ansible"
    ],
    "ansible": [
        "ansible"
    ],
    "ansible playbooks": [
        "ansible"
    ],
    "automation ansible": [
        "ansible"
    ],
    "jenkins server": [
        "jenkins"
    ],
    "jenkins pipelines": [
        "jenkins"
    ],
    "jenkins": [
        "jenkins"
    ],
    "ci/cd jenkins": [
        "jenkins"
    ],
    "cloudflare cdn": [
        "cloudflare"
    ],
    "web security cloudflare": [
        "cloudflare"
    ],
    "cloudflare": [
        "cloudflare"
    ],
    "orchestrating cloud services": [
        "cloud orchestration"
    ],
    "multi-cloud management": [
        "cloud orchestration"
    ],
    "cloud orchestration": [
        "cloud orchestration"
    ],
    "cloud services": [
        "cloud computing"
    ],
    "cloud platforms": [
        "cloud computing"
    ],
    "cloud solutions": [
        "cloud computing"
    ],
    "cloud computing": [
        "cloud computing"
    ],
    "cloud technology": [
        "cloud computing"
    ],
    "cloud infrastructure": [
        "cloud computing"
    ],
    "continuous delivery": [
        "ci/cd"
    ],
    "continuous integration": [
        "ci/cd"
    ],
    "ci/cd": [
        "ci/cd"
    ],
    "devops pipeline": [
        "ci/cd"
    ],
    "cloud protection": [
        "cloud security"
    ],
    "cloud compliance": [
        "cloud security"
    ],
    "cloud data security": [
        "cloud security"
    ],
    "cloud security": [
        "cloud security"
    ],
    "application containerization": [
        "containerization"
    ],
    "containers": [
        "containerization"
    ],
    "container-based virtualization": [
        "containerization"
    ],
    "container deployment": [
        "containerization"
    ],
    "container orchestration": [
        "containerization"
    ],
    "container management": [
        "containerization"
    ],
    "containerization": [
        "containerization"
    ],
    "virtualization": [
        "containerization"
    ],
    "Database Management": [
        "Database Management"
    ],
    "database systems": [
        "Database Management"
    ],
    "database management": [
        "Database Management"
    ],
    "database administration": [
        "Database Management"
    ],
    "dbms": [
        "Database Management"
    ],
    "Relational Databases": [
        "Relational Databases"
    ],
    "relational databases": [
        "Relational Databases"
    ],
    "structured databases": [
        "Relational Databases"
    ],
    "rdbms": [
        "Relational Databases"
    ],
    "relational db": [
        "Relational Databases"
    ],
    "structured query language databases": [
        "SQL Databases"
    ],
    "SQL Databases": [
        "SQL Databases"
    ],
    "sql databases": [
        "SQL Databases"
    ],
    "sql-based databases": [
        "SQL Databases"
    ],
    "nosql databases": [
        "NoSQL Databases"
    ],
    "non-relational databases": [
        "NoSQL Databases"
    ],
    "NoSQL Databases": [
        "NoSQL Databases"
    ],
    "unstructured databases": [
        "NoSQL Databases"
    ],
    "document database": [
        "Document-based"
    ],
    "Document-based": [
        "Document-based"
    ],
    "document-based databases": [
        "Document-based"
    ],
    "schema-less database": [
        "Document-based"
    ],
    "json store databases": [
        "Document-based"
    ],
    "Key-value Stores": [
        "Key-value Stores"
    ],
    "in-memory key-value store": [
        "Key-value Stores"
    ],
    "key-value store": [
        "Key-value Stores"
    ],
    "kv store": [
        "Key-value Stores"
    ],
    "key-value database": [
        "Key-value Stores"
    ],
    "mysql enterprise": [
        "mysql"
    ],
    "mysql": [
        "mysql"
    ],
    "mysql community": [
        "mysql"
    ],
    "mysql5": [
        "mysql"
    ],
    "mysql server": [
        "mysql"
    ],
    "mysql workbench": [
        "mysql"
    ],
    "mysql8": [
        "mysql"
    ],
    "postgresql14": [
        "postgresql"
    ],
    "postgresql12": [
        "postgresql"
    ],
    "pg": [
        "postgresql"
    ],
    "postgres": [
        "postgresql"
    ],
    "postgresql9": [
        "postgresql"
    ],
    "postgresql10": [
        "postgresql"
    ],
    "postgresql13": [
        "postgresql"
    ],
    "postgresql": [
        "postgresql"
    ],
    "sql server 2019": [
        "mssql"
    ],
    "sql server": [
        "mssql"
    ],
    "microsoft sql server": [
        "mssql"
    ],
    "sql server 2017": [
        "mssql"
    ],
    "mssql": [
        "mssql"
    ],
    "oracle": [
        "oracle"
    ],
    "oracle db": [
        "oracle"
    ],
    "oracle11g": [
        "oracle"
    ],
    "oracle19c": [
        "oracle"
    ],
    "oracle12c": [
        "oracle"
    ],
    "oracle database": [
        "oracle"
    ],
    "sqlite database": [
        "sqlite"
    ],
    "sqlite studio": [
        "sqlite"
    ],
    "sqlite browser": [
        "sqlite"
    ],
    "android sqlite": [
        "sqlite"
    ],
    "embedded sqlite": [
        "sqlite"
    ],
    "sqlite3": [
        "sqlite"
    ],
    "sqlite": [
        "sqlite"
    ],
    "mongo": [
        "mongodb"
    ],
    "mongod": [
        "mongodb"
    ],
    "mongodb": [
        "mongodb"
    ],
    "mongodb atlas": [
        "mongodb"
    ],
    "mongo shell": [
        "mongodb"
    ],
    "apache cassandra": [
        "cassandra"
    ],
    "cassandra": [
        "cassandra"
    ],
    "apache couchdb": [
        "couchdb"
    ],
    "couchdb": [
        "couchdb"
    ],
    "amazon dynamodb": [
        "dynamodb"
    ],
    "aws dynamodb": [
        "dynamodb"
    ],
    "redis cluster": [
        "redis"
    ],
    "redis server": [
        "redis"
    ],
    "in-memory database": [
        "redis"
    ],
    "redis database": [
        "redis"
    ],
    "redis": [
        "redis"
    ],
    "neo4j database": [
        "neo4j"
    ],
    "neo4j graph": [
        "neo4j"
    ],
    "neo4j enterprise": [
        "neo4j"
    ],
    "neo4j": [
        "neo4j"
    ],
    "neo4j community": [
        "neo4j"
    ],
    "memcached": [
        "memcached"
    ],
    "memcache": [
        "memcached"
    ],
    "citus cloud": [
        "citus"
    ],
    "citus data": [
        "citus"
    ],
    "citus": [
        "citus"
    ],
    "sequelize orm": [
        "sequelize"
    ],
    "sequelize.js": [
        "sequelize"
    ],
    "sequelize": [
        "sequelize"
    ],
    "sequelize ORM": [
        "sequelize"
    ],
    "sqlalchemy core": [
        "sqlalchemy"
    ],
    "sqlalchemy": [
        "sqlalchemy"
    ],
    "sqlalchemy ORM": [
        "sqlalchemy"
    ],
    "hibernate jpa": [
        "hibernate"
    ],
    "hibernate ORM": [
        "hibernate"
    ],
    "hibernate": [
        "hibernate"
    ],
    "django ORM": [
        "django ORM"
    ],
    "django object-relational mapper": [
        "django ORM"
    ],
    "active record": [
        "active record"
    ],
    "rails active record": [
        "active record"
    ],
    "entity framework core": [
        "entity framework"
    ],
    "entity framework": [
        "entity framework"
    ],
    "ef": [
        "entity framework"
    ],
    "structured query language": [
        "sql"
    ],
    "sql92": [
        "sql"
    ],
    "sql": [
        "sql"
    ],
    "sql99": [
        "sql"
    ],
    "procedural language/sql": [
        "pl/sql"
    ],
    "pl/sql": [
        "pl/sql"
    ],
    "t-sql": [
        "t-sql"
    ],
    "transact-sql": [
        "t-sql"
    ],
    "pma": [
        "phpmyadmin"
    ],
    "phpmyadmin": [
        "phpmyadmin"
    ],
    "adminer": [
        "adminer"
    ],
    "adminer.php": [
        "adminer"
    ],
    "sqlyog": [
        "sqlyog"
    ],
    "sqlyog community": [
        "sqlyog"
    ],
    "toad": [
        "toad"
    ],
    "toad for oracle": [
        "toad"
    ],
    "toad for mysql": [
        "toad"
    ],
    "dbforge mysql": [
        "dbforge"
    ],
    "dbforge studio": [
        "dbforge"
    ],
    "dbforge": [
        "dbforge"
    ],
    "mysqldump": [
        "mysqldump"
    ],
    "mysql dump": [
        "mysqldump"
    ],
    "postgresql dump": [
        "pg_dump"
    ],
    "pg_dump": [
        "pg_dump"
    ],
    "db migration": [
        "db migration"
    ],
    "flyway": [
        "db migration"
    ],
    "database migration": [
        "db migration"
    ],
    "migrate": [
        "db migration"
    ],
    "liquibase": [
        "db migration"
    ],
    "firebase auth": [
        "firebase"
    ],
    "firebase firestore": [
        "firebase"
    ],
    "firebase cloud functions": [
        "firebase"
    ],
    "firebase real-time database": [
        "firebase"
    ],
    "firebase for mobile": [
        "firebase"
    ],
    "firebase sdk": [
        "firebase"
    ],
    "firebase database": [
        "firebase"
    ],
    "google cloud sql": [
        "google cloud sql"
    ],
    "gcp sql": [
        "google cloud sql"
    ],
    "cloud sql": [
        "google cloud sql"
    ],
    "amazon rds": [
        "aws rds"
    ],
    "aws rds": [
        "aws rds"
    ],
    "aws relational database service": [
        "aws rds"
    ],
    "azure sql database": [
        "azure sql"
    ],
    "microsoft azure sql": [
        "azure sql"
    ],
    "azure sql": [
        "azure sql"
    ],
    "pgadmin4": [
        "pgadmin"
    ],
    "pgadmin": [
        "pgadmin"
    ],
    "postgres admin": [
        "pgadmin"
    ],
    "mydumper": [
        "mydumper"
    ],
    "myloader": [
        "mydumper"
    ],
    "percona": [
        "percona toolkit"
    ],
    "percona toolkit": [
        "percona toolkit"
    ],
    "pt-archiver": [
        "percona toolkit"
    ],
    "pt-query-digest": [
        "percona toolkit"
    ],
    "backend development": [
        "backend development"
    ],
    "server-side development": [
        "backend development"
    ],
    "backend engineering": [
        "backend development"
    ],
    "backend architecture": [
        "backend development"
    ],
    "hypertext preprocessor": [
        "php"
    ],
    "php7": [
        "php"
    ],
    "php": [
        "php"
    ],
    "php8": [
        "php"
    ],
    "php5": [
        "php"
    ],
    "python godot": [
        "python"
    ],
    "python": [
        "python"
    ],
    "python2": [
        "python"
    ],
    "python3": [
        "python"
    ],
    "python scripting": [
        "python"
    ],
    "pygame": [
        "python"
    ],
    "java17": [
        "java"
    ],
    "java android": [
        "java"
    ],
    "android java": [
        "java"
    ],
    "java8": [
        "java"
    ],
    "java": [
        "java"
    ],
    "jre": [
        "java"
    ],
    "java 11 games": [
        "java"
    ],
    "java11": [
        "java"
    ],
    "java programming": [
        "java"
    ],
    "java language": [
        "java"
    ],
    "java 17": [
        "java"
    ],
    "java android games": [
        "java"
    ],
    "jdk": [
        "java"
    ],
    "java 11": [
        "java"
    ],
    "libgdx": [
        "java"
    ],
    "rails": [
        "ruby"
    ],
    "ruby": [
        "ruby"
    ],
    "ruby2": [
        "ruby"
    ],
    "ruby on rails": [
        "ruby"
    ],
    "elixir": [
        "elixir"
    ],
    "elixir lang": [
        "elixir"
    ],
    "backend frameworks": [
        "web frameworks"
    ],
    "web frameworks": [
        "web frameworks"
    ],
    "server-side frameworks": [
        "web frameworks"
    ],
    "laravel framework": [
        "laravel"
    ],
    "laravel6": [
        "laravel"
    ],
    "laravel8": [
        "laravel"
    ],
    "laravel7": [
        "laravel"
    ],
    "laravel": [
        "laravel"
    ],
    "laravel9": [
        "laravel"
    ],
    "laravel5": [
        "laravel"
    ],
    "django rest framework": [
        "django"
    ],
    "django 4": [
        "django"
    ],
    "django": [
        "django"
    ],
    "drf": [
        "django"
    ],
    "django 3": [
        "django"
    ],
    "spring": [
        "spring boot"
    ],
    "spring boot": [
        "spring boot"
    ],
    "spring-boot": [
        "spring boot"
    ],
    "spring mvc": [
        "spring boot"
    ],
    "spring framework": [
        "spring boot"
    ],
    "rails7": [
        "ruby on rails"
    ],
    "rails6": [
        "ruby on rails"
    ],
    "rails5": [
        "ruby on rails"
    ],
    "express.js": [
        "express"
    ],
    "express framework": [
        "express"
    ],
    "expressjs": [
        "express"
    ],
    "express-validator": [
        "express"
    ],
    "express": [
        "express"
    ],
    "mvc": [
        "asp.net core"
    ],
    ".net core": [
        "asp.net core"
    ],
    "dotnet core": [
        "asp.net core"
    ],
    "dotnet": [
        "asp.net core"
    ],
    "asp.net": [
        "asp.net core"
    ],
    "asp.net core": [
        "asp.net core"
    ],
    "flask-wtf": [
        "flask"
    ],
    "flask-restful": [
        "flask"
    ],
    "flask-sqlalchemy": [
        "flask"
    ],
    "flask": [
        "flask"
    ],
    "flask-login": [
        "flask"
    ],
    "nestjs.js": [
        "nestjs"
    ],
    "nestjs framework": [
        "nestjs"
    ],
    "nestjs": [
        "nestjs"
    ],
    "nest": [
        "nestjs"
    ],
    "koa framework": [
        "koa"
    ],
    "koa": [
        "koa"
    ],
    "koa.js": [
        "koa"
    ],
    "koa2": [
        "koa"
    ],
    "phoenix liveview": [
        "phoenix"
    ],
    "phoenix": [
        "phoenix"
    ],
    "phoenix framework": [
        "phoenix"
    ],
    "hapi": [
        "hapi"
    ],
    "hapi.js": [
        "hapi"
    ],
    "fastapi framework": [
        "fastapi"
    ],
    "fastapi": [
        "fastapi"
    ],
    "databases": [
        "databases"
    ],
    "data storage": [
        "databases"
    ],
    "object-relational mapping": [
        "orm"
    ],
    "data abstraction": [
        "orm"
    ],
    "orm": [
        "orm"
    ],
    "typeorm": [
        "typeorm"
    ],
    "typeorm.js": [
        "typeorm"
    ],
    "typeorm ORM": [
        "typeorm"
    ],
    "mongoose.js": [
        "mongoose"
    ],
    "mongodb orm": [
        "mongoose"
    ],
    "mongoose": [
        "mongoose"
    ],
    "doctrine dbal": [
        "doctrine"
    ],
    "doctrine ORM": [
        "doctrine"
    ],
    "doctrine": [
        "doctrine"
    ],
    "api": [
        "api development"
    ],
    "api development": [
        "api development"
    ],
    "rest api": [
        "api development"
    ],
    "middleware": [
        "api development"
    ],
    "graphql": [
        "api development"
    ],
    "web services": [
        "api development"
    ],
    "graphql.js": [
        "graphql"
    ],
    "graphql api": [
        "graphql"
    ],
    "swagger ui": [
        "swagger"
    ],
    "swagger-js": [
        "swagger"
    ],
    "swagger api": [
        "swagger"
    ],
    "swagger": [
        "swagger"
    ],
    "restify": [
        "restify"
    ],
    "restify framework": [
        "restify"
    ],
    "restify.js": [
        "restify"
    ],
    "caching": [
        "caching"
    ],
    "distributed cache": [
        "caching"
    ],
    "cache": [
        "caching"
    ],
    "event streaming": [
        "message brokers"
    ],
    "message queue": [
        "message brokers"
    ],
    "message brokers": [
        "message brokers"
    ],
    "rabbit mq": [
        "rabbitmq"
    ],
    "rabbitmq": [
        "rabbitmq"
    ],
    "apache kafka": [
        "kafka"
    ],
    "kafka": [
        "kafka"
    ],
    "confluent kafka": [
        "kafka"
    ],
    "test automation": [
        "testing frameworks"
    ],
    "unit testing": [
        "testing frameworks"
    ],
    "integration testing": [
        "testing frameworks"
    ],
    "testing frameworks": [
        "testing frameworks"
    ],
    "pytest": [
        "pytest"
    ],
    "pytest-django": [
        "pytest"
    ],
    "pytest framework": [
        "pytest"
    ],
    "java unit test": [
        "junit"
    ],
    "junit testing": [
        "junit"
    ],
    "junit": [
        "junit"
    ],
    "junit5": [
        "junit"
    ],
    "ruby rspec": [
        "rspec"
    ],
    "testing rspec": [
        "rspec"
    ],
    "rspec": [
        "rspec"
    ],
    "build automation": [
        "build tools"
    ],
    "build tools": [
        "build tools"
    ],
    "package managers": [
        "build tools"
    ],
    "php package manager": [
        "composer"
    ],
    "php composer": [
        "composer"
    ],
    "composer": [
        "composer"
    ],
    "pip": [
        "pip"
    ],
    "python package installer": [
        "pip"
    ],
    "pipenv": [
        "pip"
    ],
    "pip3": [
        "pip"
    ],
    "gradle build tool": [
        "gradle"
    ],
    "gradle": [
        "gradle"
    ],
    "maven": [
        "maven"
    ],
    "apache maven": [
        "maven"
    ],
    "svn": [
        "version control"
    ],
    "version control": [
        "version control"
    ],
    "source control": [
        "version control"
    ],
    "git": [
        "version control"
    ],
    "devops tools": [
        "devops tools"
    ],
    "git version control": [
        "git"
    ],
    "github": [
        "git"
    ],
    "gitlab": [
        "git"
    ],
    "postman api testing": [
        "postman"
    ],
    "postman": [
        "postman"
    ],
    "heroku": [
        "heroku"
    ],
    "heroku platform": [
        "heroku"
    ],
    "heroku cli": [
        "heroku"
    ],
    "android studio": [
        "android development"
    ],
    "android sdk": [
        "android development"
    ],
    "android jetpack": [
        "android development"
    ],
    "android": [
        "android development"
    ],
    "android kotlin": [
        "android development"
    ],
    "android gradle": [
        "android development"
    ],
    "android native": [
        "android development"
    ],
    "android development": [
        "android development"
    ],
    "mobile development": [
        "mobile development"
    ],
    "apple ios": [
        "ios development"
    ],
    "ios app development": [
        "ios development"
    ],
    "ios development": [
        "ios development"
    ],
    "xcode": [
        "ios development"
    ],
    "ios native": [
        "ios development"
    ],
    "swift ios": [
        "ios development"
    ],
    "ios": [
        "ios development"
    ],
    "objective-c ios": [
        "ios development"
    ],
    "ios sdk": [
        "ios development"
    ],
    "xamarin": [
        "cross-platform development"
    ],
    "ionic": [
        "cross-platform development"
    ],
    "flutter": [
        "cross-platform development"
    ],
    "cross-platform mobile": [
        "cross-platform development"
    ],
    "cross-platform development": [
        "cross-platform development"
    ],
    "multi-platform": [
        "cross-platform development"
    ],
    "progressive web apps": [
        "cross-platform development"
    ],
    "cross-platform": [
        "cross-platform development"
    ],
    "pwa": [
        "cross-platform development"
    ],
    "native script": [
        "cross-platform development"
    ],
    "cordova": [
        "cross-platform development"
    ],
    "swiftui": [
        "swift"
    ],
    "swift 4": [
        "swift"
    ],
    "apple swift": [
        "swift"
    ],
    "swift": [
        "swift"
    ],
    "swift language": [
        "swift"
    ],
    "swift programming": [
        "swift"
    ],
    "swift 5": [
        "swift"
    ],
    "kotlin coroutines": [
        "kotlin"
    ],
    "kotlin multiplatform": [
        "kotlin"
    ],
    "kotlin": [
        "kotlin"
    ],
    "kotlin android": [
        "kotlin"
    ],
    "kotlin language": [
        "kotlin"
    ],
    "kotlin 1.5": [
        "kotlin"
    ],
    "obj-c programming": [
        "objective-c"
    ],
    "objectivec": [
        "objective-c"
    ],
    "objective-c": [
        "objective-c"
    ],
    "obj-c": [
        "objective-c"
    ],
    "react native 0.63": [
        "react native"
    ],
    "react-native-cli": [
        "react native"
    ],
    "react-native": [
        "react native"
    ],
    "react native expo": [
        "react native"
    ],
    "flutter dart": [
        "flutter"
    ],
    "flutter 2.0": [
        "flutter"
    ],
    "flutter framework": [
        "flutter"
    ],
    "flutter sdk": [
        "flutter"
    ],
    ".net maui": [
        "xamarin"
    ],
    "xamarin.ios": [
        "xamarin"
    ],
    "xamarin.forms": [
        "xamarin"
    ],
    "xamarin.android": [
        "xamarin"
    ],
    "xamarin c#": [
        "xamarin"
    ],
    "ionic 6": [
        "ionic"
    ],
    "ionic react": [
        "ionic"
    ],
    "ionic 5": [
        "ionic"
    ],
    "ionic framework": [
        "ionic"
    ],
    "apache cordova": [
        "cordova"
    ],
    "phonegap": [
        "cordova"
    ],
    "cordova ios": [
        "cordova"
    ],
    "cordova android": [
        "cordova"
    ],
    "nativescript-angular": [
        "native script"
    ],
    "nativescript": [
        "native script"
    ],
    "nativescript-vue": [
        "native script"
    ],
    "unity mobile": [
        "unity"
    ],
    "unity 2021": [
        "unity"
    ],
    "unity": [
        "unity"
    ],
    "unity engine": [
        "unity"
    ],
    "unity3d": [
        "unity"
    ],
    "unity mobile games": [
        "unity"
    ],
    "unity personal": [
        "unity"
    ],
    "unity pro": [
        "unity"
    ],
    "unreal engine": [
        "unreal engine"
    ],
    "ue4": [
        "unreal engine"
    ],
    "unreal engine 5": [
        "unreal engine"
    ],
    "unreal c++": [
        "unreal engine"
    ],
    "ue5": [
        "unreal engine"
    ],
    "unreal blueprint": [
        "unreal engine"
    ],
    "unreal engine mobile": [
        "unreal engine"
    ],
    "cocos2d": [
        "cocos2d-x"
    ],
    "cocos2d-x": [
        "cocos2d-x"
    ],
    "cocos creator": [
        "cocos2d-x"
    ],
    "cocos2djs": [
        "cocos2d-x"
    ],
    "godot web export": [
        "godot"
    ],
    "godot": [
        "godot"
    ],
    "godot mobile": [
        "godot"
    ],
    "godot 4.x": [
        "godot"
    ],
    "godot 4.0": [
        "godot"
    ],
    "godot 3.x": [
        "godot"
    ],
    "godot engine": [
        "godot"
    ],
    "buildbox 3.0": [
        "buildbox"
    ],
    "buildbox": [
        "buildbox"
    ],
    "buildbox engine": [
        "buildbox"
    ],
    "pwa mobile": [
        "pwa"
    ],
    "pwa framework": [
        "pwa"
    ],
    "pwa offline": [
        "pwa"
    ],
    "realm": [
        "realm"
    ],
    "realm js": [
        "realm"
    ],
    "realm database": [
        "realm"
    ],
    "mongodb realm": [
        "realm"
    ],
    "core data ios": [
        "core data"
    ],
    "core data": [
        "core data"
    ],
    "core data swift": [
        "core data"
    ],
    "android emulator": [
        "android studio"
    ],
    "xcodebuild": [
        "xcode"
    ],
    "xcode 13": [
        "xcode"
    ],
    "xcode 12": [
        "xcode"
    ],
    "vscode": [
        "visual studio"
    ],
    "visual studio code": [
        "visual studio"
    ],
    "visual studio": [
        "visual studio"
    ],
    "expo": [
        "expo"
    ],
    "expo react native": [
        "expo"
    ],
    "expo go": [
        "expo"
    ],
    "expo-cli": [
        "expo"
    ],
    "appium android": [
        "appium"
    ],
    "appium ios": [
        "appium"
    ],
    "appium game testing": [
        "appium"
    ],
    "appium inspector": [
        "appium"
    ],
    "appium": [
        "appium"
    ],
    "espresso testing": [
        "espresso"
    ],
    "android espresso": [
        "espresso"
    ],
    "espresso": [
        "espresso"
    ],
    "detox e2e": [
        "detox"
    ],
    "detox": [
        "detox"
    ],
    "detox testing": [
        "detox"
    ],
    "detox react native": [
        "detox"
    ],
    "stripe mobile": [
        "stripe"
    ],
    "stripe payments": [
        "stripe"
    ],
    "stripe": [
        "stripe"
    ],
    "stripe sdk": [
        "stripe"
    ],
    "paypal": [
        "paypal"
    ],
    "paypal sdk": [
        "paypal"
    ],
    "paypal mobile payments": [
        "paypal"
    ],
    "auth0 mobile": [
        "auth0"
    ],
    "auth0 authentication": [
        "auth0"
    ],
    "auth0": [
        "auth0"
    ],
    "apple pay sdk": [
        "apple pay"
    ],
    "apple pay": [
        "apple pay"
    ],
    "apple wallet": [
        "apple pay"
    ],
    "google pay sdk": [
        "google pay"
    ],
    "google pay": [
        "google pay"
    ],
    "gpay": [
        "google pay"
    ],
    "game development": [
        "game development"
    ],
    "indie game development": [
        "game development"
    ],
    "game dev": [
        "game development"
    ],
    "mobile game development": [
        "game development"
    ],
    "video game development": [
        "game development"
    ],
    "2d game development": [
        "2d game development"
    ],
    "pixel art": [
        "2d game development"
    ],
    "2d game engine": [
        "2d game development"
    ],
    "side-scroller development": [
        "2d game development"
    ],
    "2d graphics": [
        "2d game development"
    ],
    "2d games": [
        "2d game development"
    ],
    "3d graphics": [
        "3d game development"
    ],
    "3d games": [
        "3d game development"
    ],
    "open world development": [
        "3d game development"
    ],
    "3d rendering": [
        "3d game development"
    ],
    "3d game development": [
        "3d game development"
    ],
    "cryengine": [
        "cryengine"
    ],
    "cryengine c#": [
        "cryengine"
    ],
    "crytek engine": [
        "cryengine"
    ],
    "cryengine v": [
        "cryengine"
    ],
    "rpg maker mz": [
        "rpg maker"
    ],
    "rpg maker xp": [
        "rpg maker"
    ],
    "rpg maker": [
        "rpg maker"
    ],
    "rpg maker mv": [
        "rpg maker"
    ],
    "construct": [
        "construct"
    ],
    "scirra construct": [
        "construct"
    ],
    "construct 3": [
        "construct"
    ],
    "construct 2": [
        "construct"
    ],
    "phaser": [
        "phaser"
    ],
    "phaser framework": [
        "phaser"
    ],
    "phaser 3": [
        "phaser"
    ],
    "c# unity": [
        "c#"
    ],
    "csharp": [
        "c#"
    ],
    "csharp scripting": [
        "c#"
    ],
    "c#": [
        "c#"
    ],
    "cplusplus": [
        "c++"
    ],
    "c++ unreal engine": [
        "c++"
    ],
    "cpp": [
        "c++"
    ],
    "c++": [
        "c++"
    ],
    "C++": [
        "c++"
    ],
    "lua scripting": [
        "lua"
    ],
    "love2d": [
        "lua"
    ],
    "corona sdk": [
        "lua"
    ],
    "lua": [
        "lua"
    ],
    "blender modeling": [
        "blender"
    ],
    "blender": [
        "blender"
    ],
    "blender 3d": [
        "blender"
    ],
    "blender game engine": [
        "blender"
    ],
    "babylon 3d engine": [
        "babylon.js"
    ],
    "babylonjs": [
        "babylon.js"
    ],
    "panda3d": [
        "panda3d"
    ],
    "python panda3d": [
        "panda3d"
    ],
    "panda 3d": [
        "panda3d"
    ],
    "libgdx java": [
        "libgdx"
    ],
    "java libgdx games": [
        "libgdx"
    ],
    "pygame zero": [
        "pygame"
    ],
    "python pygame": [
        "pygame"
    ],
    "love2d lua": [
        "love2d"
    ],
    "love engine": [
        "love2d"
    ],
    "solar2d": [
        "corona sdk"
    ],
    "corona lua": [
        "corona sdk"
    ],
    "monogame c#": [
        "monogame"
    ],
    "xna": [
        "monogame"
    ],
    "monogame": [
        "monogame"
    ],
    "xna replacement": [
        "monogame"
    ],
    "openfl haxe": [
        "openfl"
    ],
    "haxe openfl": [
        "openfl"
    ],
    "openfl": [
        "openfl"
    ],
    "fmod audio": [
        "fmod"
    ],
    "fmod": [
        "fmod"
    ],
    "fmod studio": [
        "fmod"
    ],
    "wwise": [
        "wwise"
    ],
    "wwise sdk": [
        "wwise"
    ],
    "wwise audio": [
        "wwise"
    ],
    "audacity": [
        "audacity"
    ],
    "audacity audio editing": [
        "audacity"
    ],
    "photon multiplayer": [
        "photon"
    ],
    "photon engine": [
        "photon"
    ],
    "photon": [
        "photon"
    ],
    "unity mirror": [
        "mirror"
    ],
    "mirror": [
        "mirror"
    ],
    "mirror networking": [
        "mirror"
    ],
    "nakama multiplayer": [
        "nakama"
    ],
    "nakama": [
        "nakama"
    ],
    "nakama server": [
        "nakama"
    ],
    "gameanalytics": [
        "gameanalytics"
    ],
    "gameanalytics sdk": [
        "gameanalytics"
    ],
    "game analytics tools": [
        "gameanalytics"
    ],
    "firebase for games": [
        "firebase analytics"
    ],
    "firebase analytics": [
        "firebase analytics"
    ],
    "game unit tests": [
        "unit testing"
    ],
    "unittest c#": [
        "unit testing"
    ],
    "playtestcloud": [
        "playtestcloud"
    ],
    "playtest cloud": [
        "playtestcloud"
    ],
    "engine development": [
        "game engine programming"
    ],
    "rendering engine": [
        "game engine programming"
    ],
    "physics engine": [
        "game engine programming"
    ],
    "game engine programming": [
        "game engine programming"
    ],
    "tf": [
        "tensorflow"
    ],
    "tensorflow.js": [
        "tensorflow"
    ],
    "tf.keras": [
        "tensorflow"
    ],
    "tensorflow": [
        "tensorflow"
    ],
    "tf models": [
        "tensorflow"
    ],
    "tf-keras": [
        "tensorflow"
    ],
    "tensorflow serving": [
        "tensorflow"
    ],
    "tf lite": [
        "tensorflow"
    ],
    "tensorflow 2.x": [
        "tensorflow"
    ],
    "tensorflow extended": [
        "tensorflow"
    ],
    "pytorch 2.x": [
        "pytorch"
    ],
    "torch": [
        "pytorch"
    ],
    "pytorch": [
        "pytorch"
    ],
    "torchvision": [
        "pytorch"
    ],
    "libtorch": [
        "pytorch"
    ],
    "pytorch lightning": [
        "pytorch"
    ],
    "torchtext": [
        "pytorch"
    ],
    "torch 1.x": [
        "pytorch"
    ],
    "torchmetrics": [
        "pytorch"
    ],
    "scikit": [
        "scikit-learn"
    ],
    "sklearn": [
        "scikit-learn"
    ],
    "scikit-learn metrics": [
        "scikit-learn"
    ],
    "sklearn 1.x": [
        "scikit-learn"
    ],
    "sklearn library": [
        "scikit-learn"
    ],
    "sklearn 0.x": [
        "scikit-learn"
    ],
    "scikit-learn": [
        "scikit-learn"
    ],
    "scikit-learn ai": [
        "scikit-learn"
    ],
    "gluon": [
        "mxnet"
    ],
    "mxnet": [
        "mxnet"
    ],
    "mxnet 1.x": [
        "mxnet"
    ],
    "mxnet model server": [
        "mxnet"
    ],
    "apache mxnet": [
        "mxnet"
    ],
    "chainer": [
        "chainer"
    ],
    "chainer ai": [
        "chainer"
    ],
    "chainer framework": [
        "chainer"
    ],
    "chainer 6.x": [
        "chainer"
    ],
    "caffe2": [
        "caffe"
    ],
    "caffe model": [
        "caffe"
    ],
    "facebook caffe": [
        "caffe"
    ],
    "caffe 1.x": [
        "caffe"
    ],
    "caffe": [
        "caffe"
    ],
    "keras-tuner": [
        "keras"
    ],
    "keras": [
        "keras"
    ],
    "keras functional API": [
        "keras"
    ],
    "keras 2.x": [
        "keras"
    ],
    "keras 1.x": [
        "keras"
    ],
    "keras ai": [
        "keras"
    ],
    "theano 0.x": [
        "theano"
    ],
    "theano python": [
        "theano"
    ],
    "theano": [
        "theano"
    ],
    "deeplearning4j": [
        "deeplearning4j"
    ],
    "dl4j": [
        "deeplearning4j"
    ],
    "deeplearning4j 1.x": [
        "deeplearning4j"
    ],
    "dl4j java": [
        "deeplearning4j"
    ],
    "paddle": [
        "paddlepaddle"
    ],
    "paddlepaddle": [
        "paddlepaddle"
    ],
    "baidu paddlepaddle": [
        "paddlepaddle"
    ],
    "paddle 2.x": [
        "paddlepaddle"
    ],
    "huawei mindspore": [
        "mindspore"
    ],
    "mindspore": [
        "mindspore"
    ],
    "mindspore 1.x": [
        "mindspore"
    ],
    "ml": [
        "machine learning"
    ],
    "ml techniques": [
        "machine learning"
    ],
    "machine learning model": [
        "machine learning"
    ],
    "machine learning": [
        "machine learning"
    ],
    "ml model": [
        "machine learning"
    ],
    "deep learning techniques": [
        "deep learning"
    ],
    "deep learning": [
        "deep learning"
    ],
    "dl model": [
        "deep learning"
    ],
    "dl": [
        "deep learning"
    ],
    "deep neural networks": [
        "deep learning"
    ],
    "artificial neural network": [
        "ann"
    ],
    "fully connected network": [
        "ann"
    ],
    "feedforward neural network": [
        "ann"
    ],
    "ann": [
        "ann"
    ],
    "dnn": [
        "deep neural network"
    ],
    "deep neural network": [
        "deep neural network"
    ],
    "mlp": [
        "deep neural network"
    ],
    "multi-layer perceptron": [
        "deep neural network"
    ],
    "convolutional neural network": [
        "cnn"
    ],
    "cnn": [
        "cnn"
    ],
    "convnet": [
        "cnn"
    ],
    "cnn architecture": [
        "cnn"
    ],
    "resnet architecture": [
        "resnet"
    ],
    "residual network": [
        "resnet"
    ],
    "resnet": [
        "resnet"
    ],
    "vggnet": [
        "vgg"
    ],
    "vgg architecture": [
        "vgg"
    ],
    "vgg": [
        "vgg"
    ],
    "inception": [
        "inception"
    ],
    "inception v3": [
        "inception"
    ],
    "inception network": [
        "inception"
    ],
    "mobilenet v2": [
        "mobilenet"
    ],
    "mobilenet architecture": [
        "mobilenet"
    ],
    "mobilenet": [
        "mobilenet"
    ],
    "efficientnet-b0": [
        "efficientnet"
    ],
    "efficientnet": [
        "efficientnet"
    ],
    "efficientnet architecture": [
        "efficientnet"
    ],
    "vanilla rnn": [
        "rnn"
    ],
    "rnn": [
        "rnn"
    ],
    "rnn architecture": [
        "rnn"
    ],
    "recurrent neural network": [
        "rnn"
    ],
    "lstm network": [
        "lstm"
    ],
    "lstm cells": [
        "lstm"
    ],
    "long short-term memory": [
        "lstm"
    ],
    "lstm": [
        "lstm"
    ],
    "gru": [
        "gru"
    ],
    "gru architecture": [
        "gru"
    ],
    "gated recurrent unit": [
        "gru"
    ],
    "cnn-lstm": [
        "cnn-lstm"
    ],
    "cnn rnn": [
        "cnn-lstm"
    ],
    "convolutional lstm": [
        "cnn-lstm"
    ],
    "sequence-to-sequence": [
        "seq2seq"
    ],
    "encoder-decoder": [
        "seq2seq"
    ],
    "seq2seq": [
        "seq2seq"
    ],
    "attention": [
        "attention"
    ],
    "transformer attention": [
        "attention"
    ],
    "self-attention": [
        "attention"
    ],
    "attention mechanism": [
        "attention"
    ],
    "opencv 3.x": [
        "opencv"
    ],
    "opencv-python": [
        "opencv"
    ],
    "open cv library": [
        "opencv"
    ],
    "opencv": [
        "opencv"
    ],
    "opencv 4.x": [
        "opencv"
    ],
    "facebook detectron": [
        "detectron2"
    ],
    "detectron2 0.x": [
        "detectron2"
    ],
    "detectron2 vision": [
        "detectron2"
    ],
    "detectron2": [
        "detectron2"
    ],
    "face recognition dlib": [
        "dlib"
    ],
    "dlib python": [
        "dlib"
    ],
    "dlib 19.x": [
        "dlib"
    ],
    "dlib": [
        "dlib"
    ],
    "google mediapipe": [
        "mediapipe"
    ],
    "mediapipe": [
        "mediapipe"
    ],
    "mediapipe framework": [
        "mediapipe"
    ],
    "mediapipe 0.x": [
        "mediapipe"
    ],
    "transformers 3.x": [
        "transformers"
    ],
    "hf transformers": [
        "transformers"
    ],
    "transformers 4.x": [
        "transformers"
    ],
    "huggingface transformers": [
        "transformers"
    ],
    "transformers": [
        "transformers"
    ],
    "chatgpt-4": [
        "gpt"
    ],
    "gpt-2": [
        "gpt"
    ],
    "openai chatgpt": [
        "gpt"
    ],
    "gpt 3.5": [
        "gpt"
    ],
    "gpt-4": [
        "gpt"
    ],
    "gpt-3": [
        "gpt"
    ],
    "gpt-3.5": [
        "gpt"
    ],
    "chatgpt": [
        "gpt"
    ],
    "openai gpt": [
        "gpt"
    ],
    "gpt": [
        "gpt"
    ],
    "gpt-j": [
        "gpt"
    ],
    "gpt-neox": [
        "gpt"
    ],
    "bert": [
        "bert"
    ],
    "bert-base-uncased": [
        "bert"
    ],
    "bert 1.x": [
        "bert"
    ],
    "bert-large": [
        "bert"
    ],
    "bert model": [
        "bert"
    ],
    "t5": [
        "t5"
    ],
    "t5 transformer": [
        "t5"
    ],
    "google t5": [
        "t5"
    ],
    "t5-small": [
        "t5"
    ],
    "t5-base": [
        "t5"
    ],
    "llama-2-7b": [
        "llama"
    ],
    "meta llama": [
        "llama"
    ],
    "llama-2": [
        "llama"
    ],
    "meta llama 2": [
        "llama"
    ],
    "llama ai": [
        "llama"
    ],
    "llama-2-13b": [
        "llama"
    ],
    "llama-2-chat": [
        "llama"
    ],
    "llama models": [
        "llama"
    ],
    "llama": [
        "llama"
    ],
    "llama-3": [
        "llama"
    ],
    "bigscience bloom": [
        "bloom"
    ],
    "bloom transformer": [
        "bloom"
    ],
    "bloom 1.x": [
        "bloom"
    ],
    "bloom": [
        "bloom"
    ],
    "stable-baselines": [
        "stable-baselines"
    ],
    "stable baselines3": [
        "stable-baselines"
    ],
    "stable-baselines3 1.x": [
        "stable-baselines"
    ],
    "openai gym": [
        "openai gym"
    ],
    "gym 0.x": [
        "openai gym"
    ],
    "gym 1.x": [
        "openai gym"
    ],
    "gym rl": [
        "openai gym"
    ],
    "ray 1.x": [
        "rllib"
    ],
    "ray rllib": [
        "rllib"
    ],
    "rllib": [
        "rllib"
    ],
    "pd": [
        "pandas"
    ],
    "pandas 1.x": [
        "pandas"
    ],
    "pandas": [
        "pandas"
    ],
    "pandas dataframe": [
        "pandas"
    ],
    "numpy": [
        "numpy"
    ],
    "numpy array": [
        "numpy"
    ],
    "np": [
        "numpy"
    ],
    "numpy 1.x": [
        "numpy"
    ],
    "dask": [
        "dask"
    ],
    "dask 2023.x": [
        "dask"
    ],
    "dask dataframe": [
        "dask"
    ],
    "pyspark": [
        "apache spark"
    ],
    "spark 3.x": [
        "apache spark"
    ],
    "spark ml": [
        "apache spark"
    ],
    "apache spark": [
        "apache spark"
    ],
    "tensorboard": [
        "tensorboard"
    ],
    "tensorboard 2.x": [
        "tensorboard"
    ],
    "tf tensorboard": [
        "tensorboard"
    ],
    "model monitoring": [
        "mlflow"
    ],
    "mlflow tracking": [
        "mlflow"
    ],
    "mlflow": [
        "mlflow"
    ],
    "mlflow 1.x": [
        "mlflow"
    ],
    "mlflow ai": [
        "mlflow"
    ],
    "wandb 0.x": [
        "wandb"
    ],
    "wandb": [
        "wandb"
    ],
    "weights and biases": [
        "wandb"
    ],
    "tf serving": [
        "tensorflow serving"
    ],
    "tensorflow serving 2.x": [
        "tensorflow serving"
    ],
    "torchserve": [
        "torchserve"
    ],
    "pytorch model server": [
        "torchserve"
    ],
    "torchserve 0.x": [
        "torchserve"
    ],
    "optimized inference": [
        "onnx"
    ],
    "onnx 1.x": [
        "onnx"
    ],
    "onnx": [
        "onnx"
    ],
    "onnx ai": [
        "onnx"
    ],
    "onnx runtime": [
        "onnx"
    ],
    "onnx models": [
        "onnx"
    ],
    "nvidia tensorrt": [
        "tensorrt"
    ],
    "tensorrt 8.x": [
        "tensorrt"
    ],
    "tensorrt": [
        "tensorrt"
    ],
    "autokeras 1.x": [
        "autokeras"
    ],
    "auto keras": [
        "autokeras"
    ],
    "autokeras": [
        "autokeras"
    ],
    "h2o": [
        "h2o.ai"
    ],
    "h2o 3.x": [
        "h2o.ai"
    ],
    "h2o automl": [
        "h2o.ai"
    ],
    "h2o.ai": [
        "h2o.ai"
    ],
    "sagemaker studio": [
        "sagemaker"
    ],
    "sagemaker 1.x": [
        "sagemaker"
    ],
    "sagemaker llm hosting": [
        "sagemaker"
    ],
    "google cloud ai 2023.x": [
        "google ai platform"
    ],
    "google ai platform": [
        "google ai platform"
    ],
    "google ai": [
        "google ai platform"
    ],
    "gcp ai platform": [
        "google ai platform"
    ],
    "azure ml studio": [
        "azure ml"
    ],
    "azure ml": [
        "azure ml"
    ],
    "azure machine learning": [
        "azure ml"
    ],
    "optuna tuning": [
        "optuna"
    ],
    "optuna": [
        "optuna"
    ],
    "optuna 2.x": [
        "optuna"
    ],
    "ray tune 1.x": [
        "ray tune"
    ],
    "ray": [
        "ray tune"
    ],
    "ray tune": [
        "ray tune"
    ],
    "hyperopt 0.x": [
        "hyperopt"
    ],
    "hyperopt": [
        "hyperopt"
    ],
    "hyperopt optimization": [
        "hyperopt"
    ],
    "labelbox annotation": [
        "labelbox"
    ],
    "labelbox 1.x": [
        "labelbox"
    ],
    "labelbox": [
        "labelbox"
    ],
    "supervisely annotation": [
        "supervisely"
    ],
    "supervisely": [
        "supervisely"
    ],
    "supervisely 0.x": [
        "supervisely"
    ],
    "claude 2": [
        "claude"
    ],
    "anthropic claude": [
        "claude"
    ],
    "claude": [
        "claude"
    ],
    "claude 1": [
        "claude"
    ],
    "claude AI": [
        "claude"
    ],
    "palm": [
        "palm"
    ],
    "palm 2": [
        "palm"
    ],
    "google bard": [
        "palm"
    ],
    "med-palm": [
        "palm"
    ],
    "google palm 2": [
        "palm"
    ],
    "open-weight mistral": [
        "mistral"
    ],
    "mistral llm": [
        "mistral"
    ],
    "mistral": [
        "mistral"
    ],
    "mistral 7b": [
        "mistral"
    ],
    "falcon-7b": [
        "falcon"
    ],
    "falcon": [
        "falcon"
    ],
    "falcon-40b": [
        "falcon"
    ],
    "falcon ai": [
        "falcon"
    ],
    "cohere command": [
        "cohere"
    ],
    "cohere generate": [
        "cohere"
    ],
    "cohere llm": [
        "cohere"
    ],
    "cohere": [
        "cohere"
    ],
    "rag architecture": [
        "rag"
    ],
    "rag model": [
        "rag"
    ],
    "rag openai": [
        "rag"
    ],
    "rag pipeline": [
        "rag"
    ],
    "retrieval-augmented generation": [
        "rag"
    ],
    "gpt + search": [
        "rag"
    ],
    "rag": [
        "rag"
    ],
    "hf rag": [
        "rag"
    ],
    "weaviate": [
        "retrieval plugins"
    ],
    "pinecone": [
        "retrieval plugins"
    ],
    "chatgpt retrieval": [
        "retrieval plugins"
    ],
    "qdrant": [
        "retrieval plugins"
    ],
    "retrieval augmentation": [
        "retrieval plugins"
    ],
    "semantic search": [
        "retrieval plugins"
    ],
    "vector databases": [
        "retrieval plugins"
    ],
    "retrieval plugins": [
        "retrieval plugins"
    ],
    "image diffusion models": [
        "diffusion models"
    ],
    "latent diffusion": [
        "diffusion models"
    ],
    "text-to-image models": [
        "diffusion models"
    ],
    "stable diffusion": [
        "diffusion models"
    ],
    "diffusion models": [
        "diffusion models"
    ],
    "diffusion generative models": [
        "diffusion models"
    ],
    "midjourney": [
        "diffusion models"
    ],
    "dalle": [
        "diffusion models"
    ],
    "low-rank adaptation": [
        "lora"
    ],
    "qlora": [
        "lora"
    ],
    "peft fine-tuning": [
        "lora"
    ],
    "lora tuning": [
        "lora"
    ],
    "lora": [
        "lora"
    ],
    "huggingface": [
        "hugging face"
    ],
    "transformers library": [
        "hugging face"
    ],
    "hugging face": [
        "hugging face"
    ],
    "hf hub": [
        "hugging face"
    ],
    "transformers toolkit": [
        "hugging face"
    ],
    "custom gpt models": [
        "openai fine-tuning"
    ],
    "openai api": [
        "openai fine-tuning"
    ],
    "openai model fine-tuning": [
        "openai fine-tuning"
    ],
    "gpt fine-tuning": [
        "openai fine-tuning"
    ],
    "openai fine-tuning": [
        "openai fine-tuning"
    ],
    "google ai studio": [
        "vertex ai"
    ],
    "vertex ai": [
        "vertex ai"
    ],
    "google vertex ai": [
        "vertex ai"
    ],
    "vertex ai training": [
        "vertex ai"
    ],
    "amazon bedrock": [
        "bedrock"
    ],
    "bedrock models": [
        "bedrock"
    ],
    "bedrock": [
        "bedrock"
    ],
    "aws bedrock": [
        "bedrock"
    ],
    "prompt orchestration": [
        "langchain"
    ],
    "langchain": [
        "langchain"
    ],
    "llm orchestration": [
        "langchain"
    ],
    "langchain pipelines": [
        "langchain"
    ],
    "model parallelism": [
        "deepspeed"
    ],
    "deepspeed optimization": [
        "deepspeed"
    ],
    "deepspeed": [
        "deepspeed"
    ],
    "deepspeed training": [
        "deepspeed"
    ],
    "pinecone vector db": [
        "pinecone"
    ],
    "pinecone ai": [
        "pinecone"
    ],
    "pinecone embeddings": [
        "pinecone"
    ],
    "qdrant db": [
        "qdrant"
    ],
    "qdrant retrieval": [
        "qdrant"
    ],
    "qdrant vector search": [
        "qdrant"
    ],
    "weaviate vector db": [
        "weaviate"
    ],
    "weaviate ai search": [
        "weaviate"
    ],
    "genai retrieval": [
        "gpt + search"
    ],
    "gpt with plugins": [
        "gpt + search"
    ],
    "gpt retrieval": [
        "gpt + search"
    ],
    "model serving": [
        "kserve"
    ],
    "kserve": [
        "kserve"
    ],
    "kserve ai serving": [
        "kserve"
    ],
    "kserve deployment": [
        "kserve"
    ],
    "model serving platform": [
        "bentoml"
    ],
    "bentoml": [
        "bentoml"
    ],
    "bentoml framework": [
        "bentoml"
    ],
    "bento ml ai": [
        "bentoml"
    ],
    "rl": [
        "reinforcement learning"
    ],
    "ppo": [
        "reinforcement learning"
    ],
    "deep reinforcement learning": [
        "reinforcement learning"
    ],
    "rl models": [
        "reinforcement learning"
    ],
    "reinforcement learning": [
        "reinforcement learning"
    ],
    "dqn": [
        "reinforcement learning"
    ],
    "vaes models": [
        "vaes"
    ],
    "vae": [
        "vaes"
    ],
    "vaes": [
        "vaes"
    ],
    "variational autoencoders": [
        "vaes"
    ],
    "generative adversarial networks": [
        "gan"
    ],
    "gan": [
        "gan"
    ],
    "gan models": [
        "gan"
    ],
    "gan applications": [
        "gan"
    ],
    "stylegan3": [
        "sngan"
    ],
    "stylegan2": [
        "sngan"
    ],
    "sngan models": [
        "sngan"
    ],
    "stylegan": [
        "sngan"
    ],
    "sngan": [
        "sngan"
    ],
    "foundation models": [
        "large language models"
    ],
    "llm": [
        "large language models"
    ],
    "genAI": [
        "large language models"
    ],
    "transformer models": [
        "large language models"
    ],
    "generative AI": [
        "large language models"
    ],
    "large language models": [
        "large language models"
    ],
    "genai text": [
        "text generation"
    ],
    "llm text generation": [
        "text generation"
    ],
    "text generation": [
        "text generation"
    ],
    "language generation": [
        "text generation"
    ],
    "ai assistant": [
        "chatbots"
    ],
    "virtual assistant": [
        "chatbots"
    ],
    "chatbots": [
        "chatbots"
    ],
    "dialogue models": [
        "chatbots"
    ],
    "conversational AI": [
        "chatbots"
    ],
    "chatbot": [
        "chatbots"
    ],
    "zero-shot classification": [
        "zero-shot learning"
    ],
    "zero-shot learning": [
        "zero-shot learning"
    ],
    "llm zero-shot": [
        "zero-shot learning"
    ],
    "few-shot learning": [
        "few-shot learning"
    ],
    "llm few-shot": [
        "few-shot learning"
    ],
    "few-shot classification": [
        "few-shot learning"
    ],
    "multi-modal": [
        "multi-modal models"
    ],
    "multi-modal genAI": [
        "multi-modal models"
    ],
    "multi-modal models": [
        "multi-modal models"
    ],
    "vision and language": [
        "multi-modal models"
    ],
    "text-image models": [
        "multi-modal models"
    ],
    "recursion": [
        "data_structures_algorithms"
    ],
    "dynamic programming": [
        "data_structures_algorithms"
    ],
    "space complexity": [
        "data_structures_algorithms"
    ],
    "dsa": [
        "data_structures_algorithms"
    ],
    "data structures": [
        "data_structures_algorithms"
    ],
    "algorithms": [
        "data_structures_algorithms"
    ],
    "algorithm design": [
        "data_structures_algorithms"
    ],
    "time complexity": [
        "data_structures_algorithms"
    ],
    "sorting algorithms": [
        "data_structures_algorithms"
    ],
    "graph algorithms": [
        "data_structures_algorithms"
    ],
    "data_structures_algorithms": [
        "data_structures_algorithms"
    ],
    "debugging": [
        "problem_solving"
    ],
    "problem solving": [
        "problem_solving"
    ],
    "root cause analysis": [
        "problem_solving"
    ],
    "complex problem solving": [
        "problem_solving"
    ],
    "problem_solving": [
        "problem_solving"
    ],
    "critical thinking": [
        "problem_solving"
    ],
    "logical reasoning": [
        "problem_solving"
    ],
    "decision making": [
        "problem_solving"
    ],
    "troubleshooting": [
        "problem_solving"
    ],
    "creative problem-solving": [
        "problem_solving"
    ],
    "strategic thinking": [
        "problem_solving"
    ],
    "optimization": [
        "problem_solving"
    ],
    "low-level design": [
        "software_design"
    ],
    "microservices architecture": [
        "software_design"
    ],
    "system design": [
        "software_design"
    ],
    "high-level design": [
        "software_design"
    ],
    "software_design": [
        "software_design"
    ],
    "software design": [
        "software_design"
    ],
    "design patterns": [
        "software_design"
    ],
    "object-oriented design": [
        "software_design"
    ],
    "graph theory": [
        "mathematics"
    ],
    "probability": [
        "mathematics"
    ],
    "discrete mathematics": [
        "mathematics"
    ],
    "linear algebra": [
        "mathematics"
    ],
    "mathematics": [
        "mathematics"
    ],
    "statistics": [
        "mathematics"
    ],
    "combinatorics": [
        "mathematics"
    ],
    "calculus": [
        "mathematics"
    ],
    "data storytelling": [
        "data_analysis"
    ],
    "data mining": [
        "data_analysis"
    ],
    "tableau": [
        "data_analysis"
    ],
    "power bi": [
        "data_analysis"
    ],
    "data wrangling": [
        "data_analysis"
    ],
    "dashboard creation": [
        "data_analysis"
    ],
    "descriptive analysis": [
        "data_analysis"
    ],
    "eda": [
        "data_analysis"
    ],
    "data interpretation": [
        "data_analysis"
    ],
    "anomaly detection": [
        "data_analysis"
    ],
    "prescriptive analytics": [
        "data_analysis"
    ],
    "data profiling": [
        "data_analysis"
    ],
    "exploratory data analysis": [
        "data_analysis"
    ],
    "trend analysis": [
        "data_analysis"
    ],
    "multivariate analysis": [
        "data_analysis"
    ],
    "quantitative analysis": [
        "data_analysis"
    ],
    "pivot tables": [
        "data_analysis"
    ],
    "excel": [
        "data_analysis"
    ],
    "data_analysis": [
        "data_analysis"
    ],
    "predictive analytics": [
        "data_analysis"
    ],
    "statistical analysis": [
        "data_analysis"
    ],
    "data analysis": [
        "data_analysis"
    ],
    "data visualization": [
        "data_analysis"
    ],
    "modularization": [
        "computational_thinking"
    ],
    "decomposition": [
        "computational_thinking"
    ],
    "computational_thinking": [
        "computational_thinking"
    ],
    "abstraction": [
        "computational_thinking"
    ],
    "algorithmic thinking": [
        "computational_thinking"
    ],
    "computational thinking": [
        "computational_thinking"
    ],
    "pattern recognition": [
        "computational_thinking"
    ],
    "performance tuning": [
        "optimization"
    ],
    "algorithm optimization": [
        "optimization"
    ],
    "efficiency improvement": [
        "optimization"
    ],
    "code optimization": [
        "optimization"
    ],
    "version_control": [
        "version_control"
    ],
    "git workflow": [
        "version_control"
    ],
    "branching": [
        "version_control"
    ],
    "merge conflicts": [
        "version_control"
    ],
    "regression testing": [
        "software_testing"
    ],
    "performance testing": [
        "software_testing"
    ],
    "tdd": [
        "software_testing"
    ],
    "software_testing": [
        "software_testing"
    ],
    "test-driven development": [
        "software_testing"
    ],
    "continuous deployment": [
        "software_development_lifecycle"
    ],
    "scrum": [
        "software_development_lifecycle"
    ],
    "agile development": [
        "software_development_lifecycle"
    ],
    "sdlc": [
        "software_development_lifecycle"
    ],
    "kanban": [
        "software_development_lifecycle"
    ],
    "devops": [
        "software_development_lifecycle"
    ],
    "software_development_lifecycle": [
        "software_development_lifecycle"
    ],
    "interface design": [
        "systems_engineering"
    ],
    "systems engineering": [
        "systems_engineering"
    ],
    "requirements analysis": [
        "systems_engineering"
    ],
    "system architecture": [
        "systems_engineering"
    ],
    "hardware-software integration": [
        "systems_engineering"
    ],
    "systems_engineering": [
        "systems_engineering"
    ],
    "network protocols": [
        "networking"
    ],
    "tcp/ip": [
        "networking"
    ],
    "http": [
        "networking"
    ],
    "networking": [
        "networking"
    ],
    "dns": [
        "networking"
    ],
    "socket programming": [
        "networking"
    ],
    "computer networks": [
        "networking"
    ],
    "database normalization": [
        "database_management"
    ],
    "data modeling": [
        "database_management"
    ],
    "nosql": [
        "database_management"
    ],
    "database design": [
        "database_management"
    ],
    "database_management": [
        "database_management"
    ],
    "runtime analysis": [
        "debugging"
    ],
    "code inspection": [
        "debugging"
    ],
    "fault detection": [
        "debugging"
    ],
    "bug fixing": [
        "debugging"
    ],
    "automation": [
        "automation"
    ],
    "process automation": [
        "automation"
    ],
    "automated testing": [
        "automation"
    ],
    "workflow automation": [
        "automation"
    ],
    "scripting": [
        "automation"
    ],
    "simulation_modeling": [
        "simulation_modeling"
    ],
    "system simulation": [
        "simulation_modeling"
    ],
    "computational models": [
        "simulation_modeling"
    ],
    "performance modeling": [
        "simulation_modeling"
    ],
    "modeling": [
        "simulation_modeling"
    ],
    "simulation": [
        "simulation_modeling"
    ],
    "kpi development": [
        "business_analysis"
    ],
    "swot analysis": [
        "business_analysis"
    ],
    "stakeholder analysis": [
        "business_analysis"
    ],
    "bpr": [
        "business_analysis"
    ],
    "competitive analysis": [
        "business_analysis"
    ],
    "requirement elicitation": [
        "business_analysis"
    ],
    "gap analysis": [
        "business_analysis"
    ],
    "business analysis": [
        "business_analysis"
    ],
    "impact analysis": [
        "business_analysis"
    ],
    "business requirements gathering": [
        "business_analysis"
    ],
    "business_analysis": [
        "business_analysis"
    ],
    "business case analysis": [
        "business_analysis"
    ],
    "business process re-engineering": [
        "business_analysis"
    ],
    "financial analysis": [
        "financial_analysis"
    ],
    "p&l": [
        "financial_analysis"
    ],
    "roi analysis": [
        "financial_analysis"
    ],
    "financial modeling": [
        "financial_analysis"
    ],
    "profit and loss analysis": [
        "financial_analysis"
    ],
    "variance analysis": [
        "financial_analysis"
    ],
    "lifetime value": [
        "financial_analysis"
    ],
    "investment analysis": [
        "financial_analysis"
    ],
    "break-even analysis": [
        "financial_analysis"
    ],
    "financial_analysis": [
        "financial_analysis"
    ],
    "profit and loss": [
        "financial_analysis"
    ],
    "budget forecasting": [
        "financial_analysis"
    ],
    "cost-benefit analysis": [
        "financial_analysis"
    ],
    "system optimization": [
        "systems_analysis"
    ],
    "rtm": [
        "systems_analysis"
    ],
    "process mapping": [
        "systems_analysis"
    ],
    "system requirements": [
        "systems_analysis"
    ],
    "requirements traceability matrix": [
        "systems_analysis"
    ],
    "system validation": [
        "systems_analysis"
    ],
    "systems analysis": [
        "systems_analysis"
    ],
    "use case analysis": [
        "systems_analysis"
    ],
    "feasibility analysis": [
        "systems_analysis"
    ],
    "systems_analysis": [
        "systems_analysis"
    ],
    "workflow analysis": [
        "systems_analysis"
    ],
    "uml diagrams": [
        "systems_analysis"
    ],
    "spreadsheet_tools": [
        "spreadsheet_tools"
    ],
    "microsoft excel": [
        "spreadsheet_tools"
    ],
    "advanced formulas": [
        "spreadsheet_tools"
    ],
    "spreadsheet automation": [
        "spreadsheet_tools"
    ],
    "vba": [
        "spreadsheet_tools"
    ],
    "data manipulation": [
        "spreadsheet_tools"
    ],
    "macros": [
        "spreadsheet_tools"
    ],
    "google sheets": [
        "spreadsheet_tools"
    ],
    "database_tools": [
        "database_tools"
    ],
    "redshift": [
        "database_tools"
    ],
    "snowflake": [
        "database_tools"
    ],
    "sql optimization": [
        "database_tools"
    ],
    "data querying": [
        "database_tools"
    ],
    "qlikview": [
        "visualization_tools"
    ],
    "lookml": [
        "visualization_tools"
    ],
    "visualization_tools": [
        "visualization_tools"
    ],
    "ggplot": [
        "visualization_tools"
    ],
    "dash": [
        "visualization_tools"
    ],
    "seaborn": [
        "visualization_tools"
    ],
    "looker": [
        "visualization_tools"
    ],
    "plotly": [
        "visualization_tools"
    ],
    "storytelling with data": [
        "visualization_tools"
    ],
    "matplotlib": [
        "visualization_tools"
    ],
    "time series analysis": [
        "statistical_tools"
    ],
    "statistical_tools": [
        "statistical_tools"
    ],
    "spss": [
        "statistical_tools"
    ],
    "hypothesis testing": [
        "statistical_tools"
    ],
    "sas": [
        "statistical_tools"
    ],
    "regression analysis": [
        "statistical_tools"
    ],
    "stata": [
        "statistical_tools"
    ],
    "classification": [
        "statistical_tools"
    ],
    "r": [
        "statistical_tools"
    ],
    "bayesian analysis": [
        "statistical_tools"
    ],
    "predictive modeling": [
        "statistical_tools"
    ],
    "clustering": [
        "statistical_tools"
    ],
    "powerpoint": [
        "reporting_tools"
    ],
    "kpis": [
        "reporting_tools"
    ],
    "microsoft powerpoint": [
        "reporting_tools"
    ],
    "report automation": [
        "reporting_tools"
    ],
    "ppt": [
        "reporting_tools"
    ],
    "report generation": [
        "reporting_tools"
    ],
    "reporting_tools": [
        "reporting_tools"
    ],
    "data quality management": [
        "data_governance"
    ],
    "data compliance": [
        "data_governance"
    ],
    "data lineage": [
        "data_governance"
    ],
    "data privacy": [
        "data_governance"
    ],
    "mdm": [
        "data_governance"
    ],
    "data stewardship": [
        "data_governance"
    ],
    "data governance": [
        "data_governance"
    ],
    "metadata management": [
        "data_governance"
    ],
    "data_governance": [
        "data_governance"
    ],
    "master data management": [
        "data_governance"
    ],
    "data cataloging": [
        "data_governance"
    ],
    "hipaa": [
        "data_governance"
    ],
    "gdpr": [
        "data_governance"
    ],
    "etl": [
        "etl_tools"
    ],
    "data loading": [
        "etl_tools"
    ],
    "databricks": [
        "etl_tools"
    ],
    "ssis": [
        "etl_tools"
    ],
    "data extraction": [
        "etl_tools"
    ],
    "airflow": [
        "etl_tools"
    ],
    "etl_tools": [
        "etl_tools"
    ],
    "ssrs": [
        "etl_tools"
    ],
    "data transformation": [
        "etl_tools"
    ],
    "data warehousing": [
        "etl_tools"
    ],
    "ssas": [
        "etl_tools"
    ],
    "talend": [
        "etl_tools"
    ],
    "informatica": [
        "etl_tools"
    ],
    "acceptance criteria": [
        "requirements_analysis"
    ],
    "requirements validation": [
        "requirements_analysis"
    ],
    "use case modeling": [
        "requirements_analysis"
    ],
    "requirements_analysis": [
        "requirements_analysis"
    ],
    "brd": [
        "requirements_analysis"
    ],
    "non-functional requirements": [
        "requirements_analysis"
    ],
    "srs": [
        "requirements_analysis"
    ],
    "functional requirements": [
        "requirements_analysis"
    ],
    "user stories": [
        "requirements_analysis"
    ],
    "project management": [
        "project_management"
    ],
    "roadmapping": [
        "project_management"
    ],
    "project scheduling": [
        "project_management"
    ],
    "pmp": [
        "project_management"
    ],
    "agile methodologies": [
        "project_management"
    ],
    "project_management": [
        "project_management"
    ],
    "jira": [
        "project_management"
    ],
    "trello": [
        "project_management"
    ],
    "contingency planning": [
        "project_management"
    ],
    "resource management": [
        "project_management"
    ],
    "budget management": [
        "project_management"
    ],
    "project tracking": [
        "project_management"
    ],
    "resource planning": [
        "project_management"
    ],
    "milestone tracking": [
        "project_management"
    ],
    "risk management": [
        "project_management"
    ],
    "timeline planning": [
        "project_management"
    ],
    "risk_management": [
        "risk_management"
    ],
    "risk analysis": [
        "risk_management"
    ],
    "risk matrix": [
        "risk_management"
    ],
    "sensitivity analysis": [
        "risk_management"
    ],
    "mitigation planning": [
        "risk_management"
    ],
    "risk control": [
        "risk_management"
    ],
    "risk assessment": [
        "risk_management"
    ],
    "stakeholder management": [
        "stakeholder_management"
    ],
    "influencing without authority": [
        "stakeholder_management"
    ],
    "cross-functional collaboration": [
        "stakeholder_management"
    ],
    "meeting facilitation": [
        "stakeholder_management"
    ],
    "external communication": [
        "stakeholder_management"
    ],
    "collaborative planning": [
        "stakeholder_management"
    ],
    "presentation skills": [
        "stakeholder_management"
    ],
    "report writing": [
        "stakeholder_management"
    ],
    "client interaction": [
        "stakeholder_management"
    ],
    "internal communication": [
        "stakeholder_management"
    ],
    "stakeholder_management": [
        "stakeholder_management"
    ],
    "requirements communication": [
        "stakeholder_management"
    ],
    "user manuals": [
        "documentation_skills"
    ],
    "requirements documentation": [
        "documentation_skills"
    ],
    "standard operating procedures": [
        "documentation_skills"
    ],
    "product requirement documents": [
        "documentation_skills"
    ],
    "process documentation": [
        "documentation_skills"
    ],
    "release notes": [
        "documentation_skills"
    ],
    "operational manuals": [
        "documentation_skills"
    ],
    "technical writing": [
        "documentation_skills"
    ],
    "sop creation": [
        "documentation_skills"
    ],
    "documentation": [
        "documentation_skills"
    ],
    "project charters": [
        "documentation_skills"
    ],
    "documentation_skills": [
        "documentation_skills"
    ],
    "prds": [
        "documentation_skills"
    ],
    "bi": [
        "domain_knowledge"
    ],
    "domain_knowledge": [
        "domain_knowledge"
    ],
    "e-commerce analytics": [
        "domain_knowledge"
    ],
    "retail analytics": [
        "domain_knowledge"
    ],
    "hr analytics": [
        "domain_knowledge"
    ],
    "finance domain": [
        "domain_knowledge"
    ],
    "supply chain analytics": [
        "domain_knowledge"
    ],
    "marketing analytics": [
        "domain_knowledge"
    ],
    "crm systems": [
        "domain_knowledge"
    ],
    "erp": [
        "domain_knowledge"
    ],
    "business intelligence": [
        "domain_knowledge"
    ],
    "customer segmentation": [
        "domain_knowledge"
    ],
    "data protection regulations": [
        "regulations_and_compliance"
    ],
    "ifrs": [
        "regulations_and_compliance"
    ],
    "basel ii": [
        "regulations_and_compliance"
    ],
    "iso standards": [
        "regulations_and_compliance"
    ],
    "regulations_and_compliance": [
        "regulations_and_compliance"
    ],
    "sox compliance": [
        "regulations_and_compliance"
    ],
    "pci-dss": [
        "regulations_and_compliance"
    ],
    "cobit": [
        "regulations_and_compliance"
    ],
    "product strategy": [
        "product_strategy"
    ],
    "product_strategy": [
        "product_strategy"
    ],
    "go-to-market strategy": [
        "product_strategy"
    ],
    "market analysis": [
        "product_strategy"
    ],
    "product positioning": [
        "product_strategy"
    ],
    "vision setting": [
        "product_strategy"
    ],
    "value proposition": [
        "product_strategy"
    ],
    "backlog management": [
        "roadmapping"
    ],
    "feature prioritization": [
        "roadmapping"
    ],
    "roadmap planning": [
        "roadmapping"
    ],
    "strategic roadmapping": [
        "roadmapping"
    ],
    "release planning": [
        "roadmapping"
    ],
    "product roadmap": [
        "roadmapping"
    ],
    "product lifecycle management": [
        "product_lifecycle_management"
    ],
    "mvp development": [
        "product_lifecycle_management"
    ],
    "end-to-end product development": [
        "product_lifecycle_management"
    ],
    "product_lifecycle_management": [
        "product_lifecycle_management"
    ],
    "product iteration": [
        "product_lifecycle_management"
    ],
    "retirement planning": [
        "product_lifecycle_management"
    ],
    "product launch": [
        "product_lifecycle_management"
    ],
    "plm": [
        "product_lifecycle_management"
    ],
    "customer research": [
        "customer_research"
    ],
    "net promoter score": [
        "customer_research"
    ],
    "user research": [
        "customer_research"
    ],
    "nps analysis": [
        "customer_research"
    ],
    "customer_research": [
        "customer_research"
    ],
    "customer feedback loops": [
        "customer_research"
    ],
    "persona creation": [
        "customer_research"
    ],
    "voice of customer": [
        "customer_research"
    ],
    "lean product management": [
        "agile_frameworks"
    ],
    "retrospectives": [
        "agile_frameworks"
    ],
    "safe": [
        "agile_frameworks"
    ],
    "daily stand-ups": [
        "agile_frameworks"
    ],
    "agile_frameworks": [
        "agile_frameworks"
    ],
    "sprint planning": [
        "agile_frameworks"
    ],
    "backlog grooming": [
        "agile_frameworks"
    ],
    "asana": [
        "collaboration_tools"
    ],
    "confluence": [
        "collaboration_tools"
    ],
    "microsoft teams": [
        "collaboration_tools"
    ],
    "notion": [
        "collaboration_tools"
    ],
    "monday.com": [
        "collaboration_tools"
    ],
    "collaboration_tools": [
        "collaboration_tools"
    ],
    "amplitude": [
        "product_analytics"
    ],
    "google analytics": [
        "product_analytics"
    ],
    "multivariate testing": [
        "product_analytics"
    ],
    "experimentation": [
        "product_analytics"
    ],
    "churn analysis": [
        "product_analytics"
    ],
    "product_analytics": [
        "product_analytics"
    ],
    "product analytics": [
        "product_analytics"
    ],
    "cohort analysis": [
        "product_analytics"
    ],
    "mixpanel": [
        "product_analytics"
    ],
    "funnel analysis": [
        "product_analytics"
    ],
    "a/b testing": [
        "product_analytics"
    ],
    "metrics_and_kpis": [
        "metrics_and_kpis"
    ],
    "okrs": [
        "metrics_and_kpis"
    ],
    "customer acquisition cost": [
        "metrics_and_kpis"
    ],
    "objectives and key results": [
        "metrics_and_kpis"
    ],
    "key performance indicators": [
        "metrics_and_kpis"
    ],
    "goal tracking": [
        "metrics_and_kpis"
    ],
    "north star metric": [
        "metrics_and_kpis"
    ],
    "design thinking": [
        "user_experience_research"
    ],
    "information architecture": [
        "user_experience_research"
    ],
    "heuristic evaluation": [
        "user_experience_research"
    ],
    "user journey mapping": [
        "user_experience_research"
    ],
    "wireframing": [
        "user_experience_research"
    ],
    "user_experience_research": [
        "user_experience_research"
    ],
    "ux research": [
        "user_experience_research"
    ],
    "prototyping": [
        "user_experience_research"
    ],
    "axure": [
        "product_design_tools"
    ],
    "invision": [
        "product_design_tools"
    ],
    "balsamiq": [
        "product_design_tools"
    ],
    "figma": [
        "product_design_tools"
    ],
    "sketch": [
        "product_design_tools"
    ],
    "product_design_tools": [
        "product_design_tools"
    ],
    "adobe xd": [
        "product_design_tools"
    ],
    "opportunity identification": [
        "market_research"
    ],
    "market sizing": [
        "market_research"
    ],
    "market_research": [
        "market_research"
    ],
    "customer insights": [
        "market_research"
    ],
    "market research": [
        "market_research"
    ],
    "messaging": [
        "product_marketing"
    ],
    "customer acquisition": [
        "product_marketing"
    ],
    "retention strategy": [
        "product_marketing"
    ],
    "pricing strategy": [
        "product_marketing"
    ],
    "brand strategy": [
        "product_marketing"
    ],
    "product_marketing": [
        "product_marketing"
    ],
    "campaign management": [
        "product_marketing"
    ],
    "growth hacking": [
        "product_marketing"
    ],
    "retention rate": [
        "growth_metrics"
    ],
    "virality coefficient": [
        "growth_metrics"
    ],
    "growth_metrics": [
        "growth_metrics"
    ],
    "customer lifetime value": [
        "growth_metrics"
    ],
    "conversion rate": [
        "growth_metrics"
    ],
    "churn rate": [
        "growth_metrics"
    ],
    "data privacy regulations": [
        "regulatory_compliance"
    ],
    "regulatory_compliance": [
        "regulatory_compliance"
    ]
}

skills_to_category = {
    "web performance": "Web Development",
    "frontend development": "Frontend Development",
    "web development": "Web Development",
    "user interface development": "Frontend Development",
    "user experience development": "UX/UI Design",
    "html": "Frontend Development",
    "css": "Frontend Development",
    "javascript": "Frontend Development",
    "typescript": "Frontend Development",
    "react": "Frontend Development",
    "angular": "Frontend Development",
    "vue": "Frontend Development",
    "svelte": "Frontend Development",
    "next.js": "Frontend Development",
    "nuxt.js": "Frontend Development",
    "jquery": "Frontend Development",
    "bootstrap": "Frontend Development",
    "tailwind": "Frontend Development",
    "material ui": "Frontend Development",
    "chakra ui": "Frontend Development",
    "gatsby": "Frontend Development",
    "ember": "Frontend Development",
    "backbone": "Frontend Development",
    "redux": "Frontend Development",
    "mobx": "Frontend Development",
    "apollo": "Frontend Development",
    "axios": "Frontend Development",
    "webpack": "Web Development",
    "vite": "Web Development",
    "rollup": "Web Development",
    "parcel": "Web Development",
    "npm": "Web Development",
    "yarn": "Web Development",
    "pnpm": "Web Development",
    "sass": "Frontend Development",
    "less": "Frontend Development",
    "postcss": "Frontend Development",
    "jest": "Software Testing & QA",
    "mocha": "Software Testing & QA",
    "cypress": "Software Testing & QA",
    "playwright": "Software Testing & QA",
    "protractor": "Software Testing & QA",
    "styled-components": "Frontend Development",
    "emotion": "Frontend Development",
    "formik": "Frontend Development",
    "react-hook-form": "Frontend Development",
    "d3.js": "Data Science & Analytics",
    "chart.js": "Data Science & Analytics",
    "three.js": "Frontend Development",
    "framer motion": "Frontend Development",
    "gsap": "Frontend Development",
    "lodash": "Frontend Development",
    "moment.js": "Frontend Development",
    "webpack-dev-server": "Web Development",
    "storybook": "Frontend Development",
    "testing library": "Software Testing & QA",
    "css-modules": "Frontend Development",
    "babel": "Web Development",
    "babel-loader": "Web Development",
    "twin.macro": "Frontend Development",
    "aws": "Cloud Computing",
    "azure": "Cloud Computing",
    "gcp": "Cloud Computing",
    "docker": "Containerization",
    "kubernetes": "Containerization",
    "terraform": "Cloud Computing",
    "ansible": "DevOps & CI/CD",
    "jenkins": "DevOps & CI/CD",
    "cloudflare": "Cloud Computing",
    "cloud orchestration": "Cloud Computing",
    "cloud computing": "Cloud Computing",
    "ci/cd": "DevOps & CI/CD",
    "cloud security": "Cybersecurity",
    "containerization": "Containerization",
    "Database Management": "Database Management",
    "Relational Databases": "Database Management",
    "SQL Databases": "Database Management",
    "NoSQL Databases": "Database Management",
    "Document-based": "Database Management",
    "Key-value Stores": "Database Management",
    "mysql": "Database Management",
    "postgresql": "Database Management",
    "mssql": "Database Management",
    "oracle": "Database Management",
    "sqlite": "Database Management",
    "mongodb": "Database Management",
    "cassandra": "Database Management",
    "couchdb": "Database Management",
    "dynamodb": "Database Management",
    "redis": "Database Management",
    "neo4j": "Database Management",
    "memcached": "Database Management",
    "citus": "Database Management",
    "sequelize": "Database Management",
    "sqlalchemy": "Database Management",
    "hibernate": "Database Management",
    "django ORM": "Database Management",
    "active record": "Database Management",
    "entity framework": "Database Management",
    "sql": "Database Management",
    "pl/sql": "Database Management",
    "t-sql": "Database Management",
    "phpmyadmin": "Database Management",
    "adminer": "Database Management",
    "sqlyog": "Database Management",
    "toad": "Database Management",
    "dbforge": "Database Management",
    "mysqldump": "Database Management",
    "pg_dump": "Database Management",
    "db migration": "Database Management",
    "firebase": "Cloud Computing",
    "google cloud sql": "Cloud Computing",
    "aws rds": "Cloud Computing",
    "azure sql": "Cloud Computing",
    "pgadmin": "Database Management",
    "mydumper": "Database Management",
    "percona toolkit": "Database Management",
    "backend development": "Backend Development",
    "php": "Backend Development",
    "python": "Backend Development",
    "java": "Backend Development",
    "ruby": "Backend Development",
    "elixir": "Backend Development",
    "web frameworks": "Backend Development",
    "laravel": "Backend Development",
    "django": "Backend Development",
    "spring boot": "Backend Development",
    "ruby on rails": "Backend Development",
    "express": "Backend Development",
    "asp.net core": "Backend Development",
    "flask": "Backend Development",
    "nestjs": "Backend Development",
    "koa": "Backend Development",
    "phoenix": "Backend Development",
    "hapi": "Backend Development",
    "fastapi": "Backend Development",
    "databases": "Database Management",
    "orm": "Backend Development",
    "typeorm": "Backend Development",
    "mongoose": "Backend Development",
    "doctrine": "Backend Development",
    "api development": "API Development & Management",
    "graphql": "API Development & Management",
    "swagger": "API Development & Management",
    "restify": "API Development & Management",
    "caching": "Backend Development",
    "message brokers": "Backend Development",
    "rabbitmq": "Backend Development",
    "kafka": "Backend Development",
    "testing frameworks": "Software Testing & QA",
    "pytest": "Software Testing & QA",
    "junit": "Software Testing & QA",
    "rspec": "Software Testing & QA",
    "build tools": "DevOps & CI/CD",
    "composer": "DevOps & CI/CD",
    "pip": "DevOps & CI/CD",
    "gradle": "DevOps & CI/CD",
    "maven": "DevOps & CI/CD",
    "version control": "Version Control Systems",
    "devops tools": "DevOps & CI/CD",
    "git": "Version Control Systems",
    "postman": "API Development & Management",
    "heroku": "Cloud Computing",
    "android development": "Mobile Development",
    "mobile development": "Mobile Development",
    "ios development": "Mobile Development",
    "cross-platform development": "Mobile Development",
    "swift": "Mobile Development",
    "kotlin": "Mobile Development",
    "objective-c": "Mobile Development",
    "react native": "Mobile Development",
    "flutter": "Mobile Development",
    "xamarin": "Mobile Development",
    "ionic": "Mobile Development",
    "cordova": "Mobile Development",
    "native script": "Mobile Development",
    "unity": "Game Development",
    "unreal engine": "Game Development",
    "cocos2d-x": "Game Development",
    "godot": "Game Development",
    "buildbox": "Game Development",
    "pwa": "Frontend Development",
    "realm": "Mobile Development",
    "core data": "Mobile Development",
    "android studio": "Mobile Development",
    "xcode": "Mobile Development",
    "visual studio": "Mobile Development",
    "expo": "Mobile Development",
    "appium": "Mobile Development",
    "espresso": "Mobile Development",
    "detox": "Mobile Development",
    "stripe": "Backend Development",
    "paypal": "Backend Development",
    "auth0": "Backend Development",
    "apple pay": "Backend Development",
    "google pay": "Backend Development",
    "game development": "Game Development",
    "2d game development": "Game Development",
    "3d game development": "Game Development",
    "cryengine": "Game Development",
    "rpg maker": "Game Development",
    "construct": "Game Development",
    "phaser": "Game Development",
    "c#": "Game Development",
    "c++": "Game Development",
    "lua": "Game Development",
    "blender": "Game Development",
    "babylon.js": "Game Development",
    "panda3d": "Game Development",
    "libgdx": "Game Development",
    "pygame": "Game Development",
    "love2d": "Game Development",
    "corona sdk": "Game Development",
    "monogame": "Game Development",
    "openfl": "Game Development",
    "fmod": "Game Development",
    "wwise": "Game Development",
    "audacity": "Game Development",
    "photon": "Game Development",
    "mirror": "Game Development",
    "nakama": "Game Development",
    "gameanalytics": "Game Development",
    "firebase analytics": "Game Development",
    "unit testing": "Software Testing & QA",
    "playtestcloud": "Game Development",
    "game engine programming": "Game Development",
    "tensorflow": "Machine Learning",
    "pytorch": "Machine Learning",
    "scikit-learn": "Machine Learning",
    "mxnet": "Machine Learning",
    "chainer": "Machine Learning",
    "caffe": "Machine Learning",
    "keras": "Machine Learning",
    "theano": "Machine Learning",
    "deeplearning4j": "Machine Learning",
    "paddlepaddle": "Machine Learning",
    "mindspore": "Machine Learning",
    "machine learning": "Machine Learning",
    "deep learning": "Deep Learning",
    "ann": "Deep Learning",
    "deep neural network": "Deep Learning",
    "cnn": "Deep Learning",
    "resnet": "Deep Learning",
    "vgg": "Deep Learning",
    "inception": "Deep Learning",
    "mobilenet": "Deep Learning",
    "efficientnet": "Deep Learning",
    "rnn": "Deep Learning",
    "lstm": "Deep Learning",
    "gru": "Deep Learning",
    "cnn-lstm": "Deep Learning",
    "seq2seq": "Deep Learning",
    "attention": "Deep Learning",
    "opencv": "Computer Vision",
    "detectron2": "Computer Vision",
    "dlib": "Computer Vision",
    "mediapipe": "Computer Vision",
    "transformers": "Machine Learning",
    "gpt": "Large Language Models",
    "bert": "Large Language Models",
    "t5": "Large Language Models",
    "llama": "Large Language Models",
    "bloom": "Large Language Models",
    "stable-baselines": "Reinforcement Learning",
    "openai gym": "Reinforcement Learning",
    "rllib": "Reinforcement Learning",
    "pandas": "Data Science & Analysis",
    "numpy": "Data Science & Analysis",
    "dask": "Data Science & Analysis",
    "apache spark": "Data Science & Analysis",
    "tensorboard": "Machine Learning",
    "mlflow": "Machine Learning",
    "wandb": "Machine Learning",
    "tensorflow serving": "Machine Learning",
    "torchserve": "Machine Learning",
    "onnx": "Machine Learning",
    "tensorrt": "Machine Learning",
    "autokeras": "Machine Learning",
    "h2o.ai": "Machine Learning",
    "sagemaker": "Cloud Computing",
    "google ai platform": "Cloud Computing",
    "azure ml": "Cloud Computing",
    "optuna": "Machine Learning",
    "ray tune": "Machine Learning",
    "hyperopt": "Machine Learning",
    "labelbox": "Machine Learning",
    "supervisely": "Machine Learning",
    "claude": "Large Language Models",
    "palm": "Large Language Models",
    "mistral": "Large Language Models",
    "falcon": "Large Language Models",
    "cohere": "Large Language Models",
    "rag": "Machine Learning",
    "retrieval plugins": "Machine Learning",
    "diffusion models": "Machine Learning",
    "lora": "Machine Learning",
    "hugging face": "Machine Learning",
    "openai fine-tuning": "Machine Learning",
    "vertex ai": "Cloud Computing",
    "bedrock": "Cloud Computing",
    "langchain": "Machine Learning",
    "deepspeed": "Machine Learning",
    "pinecone": "Machine Learning",
    "qdrant": "Machine Learning",
    "weaviate": "Machine Learning",
    "gpt + search": "Machine Learning",
    "kserve": "Machine Learning",
    "bentoml": "Machine Learning",
    "reinforcement learning": "Reinforcement Learning",
    "vaes": "Deep Learning",
    "gan": "Deep Learning",
    "sngan": "Deep Learning",
    "large language models": "Large Language Models",
    "text generation": "Machine Learning",
    "chatbots": "Machine Learning",
    "zero-shot learning": "Machine Learning",
    "few-shot learning": "Machine Learning",
    "multi-modal models": "Machine Learning",
    "data_structures_algorithms": "Software Engineering",
    "problem_solving": "Software Engineering",
    "software_design": "Software Engineering",
    "mathematics": "Software Engineering",
    "data_analysis": "Data Science & Analysis",
    "computational_thinking": "Software Engineering",
    "optimization": "Software Engineering",
    "version_control": "Version Control Systems",
    "software_testing": "Software Testing & QA",
    "software_development_lifecycle": "Software Engineering",
    "systems_engineering": "Software Engineering",
    "networking": "Systems Engineering",
    "database_management": "Database Management",
    "debugging": "Software Engineering",
    "automation": "Software Engineering",
    "simulation_modeling": "Software Engineering",
    "business_analysis": "Business Analysis",
    "financial_analysis": "Business Analysis",
    "systems_analysis": "Business Analysis",
    "spreadsheet_tools": "Business Analysis",
    "database_tools": "Business Analysis",
    "visualization_tools": "Business Analysis",
    "statistical_tools": "Business Analysis",
    "reporting_tools": "Business Analysis",
    "data_governance": "Data Governance",
    "etl_tools": "Data Engineering",
    "requirements_analysis": "Business Analysis",
    "project_management": "Project Management",
    "risk_management": "Project Management",
    "stakeholder_management": "Project Management",
    "documentation_skills": "Business Analysis",
    "domain_knowledge": "Business Analysis",
    "regulations_and_compliance": "Business Analysis",
    "product_strategy": "Product Management",
    "roadmapping": "Product Management",
    "product_lifecycle_management": "Product Management",
    "customer_research": "Product Management",
    "agile_frameworks": "Product Management",
    "collaboration_tools": "Product Management",
    "product_analytics": "Product Management",
    "metrics_and_kpis": "Product Management",
    "user_experience_research": "UX/UI Design",
    "product_design_tools": "UX/UI Design",
    "market_research": "Product Management",
    "product_marketing": "Product Management",
    "growth_metrics": "Product Management",
    "regulatory_compliance": "Business Analysis"
}
print(len(skills_to_category))

# Categorized action verbs
action_verbs = [
    # Technical
    {"category": "Technical", "verb": "Accelerated"},
    {"category": "Technical", "verb": "Administered"},
    {"category": "Technical", "verb": "Allocated"},
    {"category": "Technical", "verb": "Analyzed"},
    {"category": "Technical", "verb": "Appraised"},
    {"category": "Technical", "verb": "Arbitrated"},
    {"category": "Technical", "verb": "Audited"},
    {"category": "Technical", "verb": "Balanced"},
    {"category": "Technical", "verb": "Budgeted"},
    {"category": "Technical", "verb": "Calculated"},
    {"category": "Technical", "verb": "Coded"},
    {"category": "Technical", "verb": "Collected"},
    {"category": "Technical", "verb": "Classified"},
    {"category": "Technical", "verb": "Collated"},
    {"category": "Technical", "verb": "Compiled"},
    {"category": "Technical", "verb": "Computed"},
    {"category": "Technical", "verb": "Conceptualized"},
    {"category": "Technical", "verb": "Conducted"},
    {"category": "Technical", "verb": "Deployed"},
    {"category": "Technical", "verb": "Diagnosed"},
    {"category": "Technical", "verb": "Discussed"},
    {"category": "Technical", "verb": "Discovered"},
    {"category": "Technical", "verb": "Eliminated"},
    {"category": "Technical", "verb": "Estimated"},
    {"category": "Technical", "verb": "Evaluated"},
    {"category": "Technical", "verb": "Extrapolated"},
    {"category": "Technical", "verb": "Forecasted"},
    {"category": "Technical", "verb": "Furnished"},
    {"category": "Technical", "verb": "Generated"},
    {"category": "Technical", "verb": "Identified"},
    {"category": "Technical", "verb": "Improved"},
    {"category": "Technical", "verb": "Innovated"},
    {"category": "Technical", "verb": "Installed"},
    {"category": "Technical", "verb": "Inspected"},
    {"category": "Technical", "verb": "Interviewed"},
    {"category": "Technical", "verb": "Investigated"},
    {"category": "Technical", "verb": "Itemized"},
    {"category": "Technical", "verb": "Measured"},
    {"category": "Technical", "verb": "Modelled"},
    {"category": "Technical", "verb": "Monitored"},
    {"category": "Technical", "verb": "Netted"},
    {"category": "Technical", "verb": "Operated"},
    {"category": "Technical", "verb": "Optimized"},
    {"category": "Technical", "verb": "Predicted"},
    {"category": "Technical", "verb": "Processed"},
    {"category": "Technical", "verb": "Projected"},
    {"category": "Technical", "verb": "Quantified"},
    {"category": "Technical", "verb": "Reconciled"},
    {"category": "Technical", "verb": "Refined"},
    {"category": "Technical", "verb": "Researched"},
    {"category": "Technical", "verb": "Restructured"},
    {"category": "Technical", "verb": "Screened"},
    {"category": "Technical", "verb": "Segmented"},
    {"category": "Technical", "verb": "Simplified"},
    {"category": "Technical", "verb": "Standardized"},
    {"category": "Technical", "verb": "Surveyed"},
    {"category": "Technical", "verb": "Systematized"},
    {"category": "Technical", "verb": "Tabulated"},
    {"category": "Technical", "verb": "Tested"},
    {"category": "Technical", "verb": "Tracked"},
    {"category": "Technical", "verb": "Traced"},
    {"category": "Technical", "verb": "Troubleshooted"},
    {"category": "Technical", "verb": "Upgraded"},
    {"category": "Technical", "verb": "Validated"},
    {"category": "Technical", "verb": "Verified"},
    {"category": "Technical", "verb": "Automated"},
    {"category": "Technical", "verb": "Debugged"},
    {"category": "Technical", "verb": "Steered"},
    {"category": "Technical", "verb": "Overhauled"},

   # Leadership
    {"category": "Leadership", "verb": "Acted"},
    {"category": "Leadership", "verb": "Administered"},
    {"category": "Leadership", "verb": "Assigned"},
    {"category": "Leadership", "verb": "Approved"},
    {"category": "Leadership", "verb": "Attained"},
    {"category": "Leadership", "verb": "Chaired"},
    {"category": "Leadership", "verb": "Combined"},
    {"category": "Leadership", "verb": "Contracted"},
    {"category": "Leadership", "verb": "Consolidated"},
    {"category": "Leadership", "verb": "Controlled"},
    {"category": "Leadership", "verb": "Coordinated"},
    {"category": "Leadership", "verb": "Delegated"},
    {"category": "Leadership", "verb": "Developed"},
    {"category": "Leadership", "verb": "Directed"},
    {"category": "Leadership", "verb": "Eliminated"},
    {"category": "Leadership", "verb": "Executed"},
    {"category": "Leadership", "verb": "Guided"},
    {"category": "Leadership", "verb": "Improved"},
    {"category": "Leadership", "verb": "Innovated"},
    {"category": "Leadership", "verb": "Launched"},
    {"category": "Leadership", "verb": "Led"},
    {"category": "Leadership", "verb": "Managed"},
    {"category": "Leadership", "verb": "Marketed"},
    {"category": "Leadership", "verb": "Moderated"},
    {"category": "Leadership", "verb": "Organized"},
    {"category": "Leadership", "verb": "Oversaw"},
    {"category": "Leadership", "verb": "Planned"},
    {"category": "Leadership", "verb": "Presided"},
    {"category": "Leadership", "verb": "Produced"},
    {"category": "Leadership", "verb": "Recommended"},
    {"category": "Leadership", "verb": "Reorganized"},
    {"category": "Leadership", "verb": "Restored"},
    {"category": "Leadership", "verb": "Resolved"},
    {"category": "Leadership", "verb": "Reviewed"},
    {"category": "Leadership", "verb": "Scheduled"},
    {"category": "Leadership", "verb": "Selected"},
    {"category": "Leadership", "verb": "Simplified"},
    {"category": "Leadership", "verb": "Spearheaded"},
    {"category": "Leadership", "verb": "Strengthened"},
    {"category": "Leadership", "verb": "Supervised"},
    {"category": "Leadership", "verb": "Terminated"},
    {"category": "Leadership", "verb": "Unified"},

    # Communication
    {"category": "Communication", "verb": "Addressed"},
    {"category": "Communication", "verb": "Advised"},
    {"category": "Communication", "verb": "Arranged"},
    {"category": "Communication", "verb": "Authored"},
    {"category": "Communication", "verb": "Clarified"},
    {"category": "Communication", "verb": "Collaborated"},
    {"category": "Communication", "verb": "Conferred"},
    {"category": "Communication", "verb": "Contacted"},
    {"category": "Communication", "verb": "Convinced"},
    {"category": "Communication", "verb": "Debated"},
    {"category": "Communication", "verb": "Demonstrated"},
    {"category": "Communication", "verb": "Directed"},
    {"category": "Communication", "verb": "Drafted"},
    {"category": "Communication", "verb": "Enlisted"},
    {"category": "Communication", "verb": "Explained"},
    {"category": "Communication", "verb": "Facilitated"},
    {"category": "Communication", "verb": "Furnished"},
    {"category": "Communication", "verb": "Guided"},
    {"category": "Communication", "verb": "Helped"},
    {"category": "Communication", "verb": "Informed"},
    {"category": "Communication", "verb": "Influenced"},
    {"category": "Communication", "verb": "Interpreted"},
    {"category": "Communication", "verb": "Interviewed"},
    {"category": "Communication", "verb": "Judged"},
    {"category": "Communication", "verb": "Listened"},
    {"category": "Communication", "verb": "Mediated"},
    {"category": "Communication", "verb": "Negotiated"},
    {"category": "Communication", "verb": "Outlined"},
    {"category": "Communication", "verb": "Persuaded"},
    {"category": "Communication", "verb": "Presented"},
    {"category": "Communication", "verb": "Promoted"},
    {"category": "Communication", "verb": "Publicized"},
    {"category": "Communication", "verb": "Recruited"},
    {"category": "Communication", "verb": "Reinforced"},
    {"category": "Communication", "verb": "Resolved"},
    {"category": "Communication", "verb": "Solicited"},
    {"category": "Communication", "verb": "Summarized"},
    {"category": "Communication", "verb": "Translated"},
    {"category": "Communication", "verb": "Tutored"},

    # Innovation
    {"category": "Innovation", "verb": "Accelerated"},
    {"category": "Innovation", "verb": "Architected"},
    {"category": "Innovation", "verb": "Assembled"},
    {"category": "Innovation", "verb": "Advertised"},
    {"category": "Innovation", "verb": "Broadened"},
    {"category": "Innovation", "verb": "Composed"},
    {"category": "Innovation", "verb": "Conceived"},
    {"category": "Innovation", "verb": "Created"},
    {"category": "Innovation", "verb": "Customized"},
    {"category": "Innovation", "verb": "Designed"},
    {"category": "Innovation", "verb": "Devised"},
    {"category": "Innovation", "verb": "Directed"},
    {"category": "Innovation", "verb": "Drew"},
    {"category": "Innovation", "verb": "Effected"},
    {"category": "Innovation", "verb": "Eliminated"},
    {"category": "Innovation", "verb": "Engineered"},
    {"category": "Innovation", "verb": "Established"},
    {"category": "Innovation", "verb": "Expanded"},
    {"category": "Innovation", "verb": "Fashioned"},
    {"category": "Innovation", "verb": "Founded"},
    {"category": "Innovation", "verb": "Formulated"},
    {"category": "Innovation", "verb": "Generated"},
    {"category": "Innovation", "verb": "Illustrated"},
    {"category": "Innovation", "verb": "Initiated"},
    {"category": "Innovation", "verb": "Instituted"},
    {"category": "Innovation", "verb": "Integrated"},
    {"category": "Innovation", "verb": "Introduced"},
    {"category": "Innovation", "verb": "Invented"},
    {"category": "Innovation", "verb": "Mastered"},
    {"category": "Innovation", "verb": "Modernized"},
    {"category": "Innovation", "verb": "Opened"},
    {"category": "Innovation", "verb": "Originated"},
    {"category": "Innovation", "verb": "Performed"},
    {"category": "Innovation", "verb": "Planned"},
    {"category": "Innovation", "verb": "Produced"},
    {"category": "Innovation", "verb": "Promoted"},
    {"category": "Innovation", "verb": "Revitalized"},
    {"category": "Innovation", "verb": "Shaped"},
    {"category": "Innovation", "verb": "Simplified"},
    {"category": "Innovation", "verb": "Set up"},
    {"category": "Innovation", "verb": "Shaped"},
    {"category": "Innovation", "verb": "Streamlined"},
    {"category": "Innovation", "verb": "Strengthened"},
    {"category": "Innovation", "verb": "Transformed"},
    {"category": "Innovation", "verb": "Tripled"},
    {"category": "Innovation", "verb": "Upgraded"},
    {"category": "Innovation", "verb": "Visualized"},
    {"category": "Innovation", "verb": "Widened"}
]

# Imports
import gradio as gr
import os
import re
from word2number import w2n
import torch
import locale
from datetime import datetime
# Hugging Face and Llama Index Imports
from huggingface_hub import login
# Ensure you remove any problematic imports
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, Settings
from llama_index.core.prompts.prompts import SimpleInputPrompt
from llama_index.embeddings.langchain import LangchainEmbedding
from langchain.embeddings.huggingface import HuggingFaceEmbeddings
from llama_index.llms.huggingface import HuggingFaceLLM
import shutil
import uuid
import gradio as gr
import tempfile
from datetime import datetime

# Authentication (use your token)
login("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")

# Rest of the code remains the same as in your original script
def initialize_llm():
    # Ensure we're using CUDA
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    
    system_prompt = """
    You are an assistant for question-answering tasks.
    Use the following documents to answer the question.
    Use only the above documents to answer the question. If the information is not present, respond with "I don't know."
    Five sentences maximum and keep the answer concise.
    """
    query_wrapper_prompt = SimpleInputPrompt("<|USER|>{query_str}<|ASSISTANT|>")

    llm = HuggingFaceLLM(
        context_window=4096,
        max_new_tokens=512,
        generate_kwargs={"temperature": 0.0, "do_sample": False},
        system_prompt=system_prompt,
        query_wrapper_prompt=query_wrapper_prompt,
        tokenizer_name="meta-llama/Llama-2-7b-chat-hf",
        model_name="meta-llama/Llama-2-7b-chat-hf",
        device_map="cuda",  # Explicitly use CUDA
        model_kwargs={
            "torch_dtype": torch.float16, 
            "load_in_8bit": True,
            "max_memory": {0: "20GiB"}  # Adjust based on your GPU memory
        }
    )

    # Explicitly load embedding model on GPU
    embed_model = LangchainEmbedding(
        HuggingFaceEmbeddings(
            model_name="sentence-transformers/all-mpnet-base-v2",
            model_kwargs={'device': 'cuda'}  # Explicitly set to CUDA
        )
    )

    Settings.llm = llm
    Settings.embed_model = embed_model

    return llm, embed_model

def extract_overall_experience(response):
    overall_pattern = r"\b(total|overall)\s*(?:experience)?\s*(?:is)?\s*(\d+|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)\s*years"
    fragment_pattern = r"(?<!\b(?:19|20)\d{2}\b)(?:(?<!design\s)(?<!lead\s)(?<!senior\s))\b(\d+|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)\s*years?\b(?!\s*(?:in|of)\s*(?:experience|total|overall))"

    def parse_number(text):
        try:
            return w2n.word_to_num(text)
        except ValueError:
            return int(text)

    overall_match = re.search(overall_pattern, response.lower())
    if overall_match:
        return parse_number(overall_match.group(2))

    fragment_matches = list(dict.fromkeys(re.findall(fragment_pattern, response.lower())))

    if fragment_matches:
        parsed_fragments = sorted([parse_number(match) for match in fragment_matches])
        return min(parsed_fragments[-1], 15)

    return 0

def extract_relevant_bullets(response):

    # Step 2: Extract bullets based on common bullet symbols or formats
    bullet_points = re.findall(r"(?m)^\s*(?:\d+\.\s*|\*\s*|-+\s*|•\s*|•\s*)[^\n]+", response)

    # Step 3: Filter bullets for quantifiable impact metrics, ignoring academic references
    relevant_bullets = [
        bullet.strip() for bullet in bullet_points
        if  not re.search(r"10th|12th|board exam|grade|grad|school", bullet, re.IGNORECASE)
    ]

    # Step 4: Count filtered bullets
    filtered_count = len(relevant_bullets)

    # Output results
    print("Filtered bullet points (related to project or work impact):")
    for i, bullet in enumerate(relevant_bullets, 1):
        print(f"{i}. {bullet}")

    print("\nTotal instances counted in response:", len(bullet_points))
    print("Count of relevant impact bullets:", filtered_count)

    return filtered_count

# print(f"\n--- Processing Response ---")
# impact_bullet_count=extract_relevant_bullets(str(quantifiable_metrics))
# print(impact_bullet_count)

def extract_skills(response):
    # Define a regex pattern to match bullet points or numbered lists
    bullet_pattern = r"(\d+\.\s+|\*\s+|–\s+|•\s+|,|\s+)"

    # Remove any headers or unnecessary text from the response
    # Split by bullet points or commas
    skills = re.split(bullet_pattern, response)

    # Clean up the skills, strip whitespace, and filter out empty entries
    cleaned_skills = [skill.strip() for skill in skills if skill.strip()]

    # Flatten the list if there are nested lists (from numbered items)
    final_skills = []
    for skill in cleaned_skills:
        # Split on commas if the skill contains multiple skills
        final_skills.extend([s.strip() for s in skill.split(',') if s.strip()])

    # Remove duplicates by converting to a set and back to a list
    unique_skills = list(set(final_skills))

    # Print the extracted unique skills
    print("Extracted Technical Skills:", unique_skills)
    return unique_skills

# print(f"\n--- Processing Response ---")
# candidate_skills_list=extract_skills(str(skills))

import re
import spacy
import fitz  # PyMuPDF for PDF processing

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

def extract_action_verbs(text):
    """Extract action verbs from the given text and count occurrences by category."""
    doc = nlp(text.lower())  # Process the text with spaCy
    detected_verbs = [token.text for token in doc if token.pos_ == "VERB"]

    # Initialize a dictionary to hold counts by category and matched verbs
    category_counts = {
        "Technical": {"unique_count": 0, "total_count": 0, "matches": []},
        "Leadership": {"unique_count": 0, "total_count": 0, "matches": []},
        "Communication": {"unique_count": 0, "total_count": 0, "matches": []},
        "Innovation": {"unique_count": 0, "total_count": 0, "matches": []},
    }

    for action in action_verbs:
        # Convert the verb to lowercase for case-insensitive matching
        verb_lower = action["verb"].lower()

        # Count occurrences in detected_verbs, making them lowercase as well
        verb_count = sum(1 for verb in detected_verbs if verb.lower() == verb_lower)

        if verb_count > 0:
            # Increment the total count for the category
            category_counts[action["category"]]["total_count"] += verb_count

            # If the verb is not already in the matches list for the category, add it
            found = next(
                (item for item in category_counts[action["category"]]["matches"] if item["verb"].lower() == verb_lower),
                None
            )

            if found:
                # Increment the count for the verb if it's already in the matches list
                found["count"] += verb_count
            else:
                # Add the verb with its count to the matches list
                category_counts[action["category"]]["matches"].append({"verb": action["verb"], "count": verb_count})
                # Increment the unique count for the category
                category_counts[action["category"]]["unique_count"] += 1

    return category_counts


def extract_pdf_text_and_links(pdf_path):
    """Extract text and hyperlinks (e.g., LinkedIn, GitHub) from a PDF."""
    text = ""
    links = []

    with fitz.open(pdf_path) as pdf:
        for page_num in range(pdf.page_count):
            page = pdf.load_page(page_num)
            text += page.get_text()

            # Extract hyperlinks if present
            for link in page.get_links():
                if link.get("uri"):
                    links.append(link["uri"])

    return text, links

def extract_email_phone(text):
    """Extract name, email, phone, and social links from text."""
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    phone_pattern = (
        r'\b(\+?\d{1,3}[-.\s]?)?(\(?\d{1,4}\)?[-.\s]?)?\d{1,4}[-.\s]?\d{1,4}[-.\s]?\d{1,9}\b'
    )
    email = re.search(email_pattern, text)
    phone = re.search(phone_pattern, text)

    return {
        "email": email.group() if email else None,
        "phone": phone.group() if phone else None
    }
def get_word_count(text):
    """Return the word count of the given text."""
    words = text.split()
    return len(words)

def extract_social_links(links, text):
    """Extract GitHub and LinkedIn links, prioritizing the shortest GitHub link as profile."""
    linkedin_pattern = r'(https?://)?(www\.)?linkedin\.com/in/[a-zA-Z0-9_-]+'
    github_pattern = r'(https?://)?(www\.)?github\.com/[a-zA-Z0-9_-]+'

    linkedin = None
    github_links = []

    # Check links first
    for link in links:
        if re.search(linkedin_pattern, link):
            linkedin = link
        elif re.search(github_pattern, link):
            github_links.append(link)

    # If no valid GitHub or LinkedIn link found, fallback to text search
    if not linkedin:
        linkedin_match = re.search(linkedin_pattern, text)
        linkedin = linkedin_match.group() if linkedin_match else None

    if not github_links:
        github_matches = re.findall(github_pattern, text)
        github_links.extend(github_matches)

    # Choose the shortest GitHub link (most likely the profile)
    github = min(github_links, key=len) if github_links else None

    return linkedin, github

def parse_resume(pdf_path):
    """Parse the resume PDF and extract key information."""
    text, links = extract_pdf_text_and_links(pdf_path)
    contact_info = extract_email_phone(text)

    linkedin, github = extract_social_links(links, text)
    contact_info["linkedin"] = linkedin
    contact_info["github"] = github

    detected_action_verbs = extract_action_verbs(text)
    word_count = get_word_count(text)
    return {
        "contact_info": contact_info,
        "detected_action_verbs": detected_action_verbs,
        "word_count": word_count,
        "links": links
    }

import re

def extract_experience_years(jd_text):
    # Step 1: Extract a lenient match for the "Requirements and Qualifications" section
    section_match = re.search(r"(?:Requirements|Qualifications)[\w\s]*:\s*(.*?)(?:\n\n|$)", jd_text, re.DOTALL | re.IGNORECASE)

    experience_pattern = r"(?:more\s+than\s+|at\s+least\s+|up\s+to\s+|between\s+)?(\d+)(?:\s*(?:-|to)\s*(\d+))?\s+(?:years?|months?)"
    lenient_experience_pattern = r"(\d+)\s*(?:\+|to|-)\s*(\d+)?\s*years?"
    if section_match:
        # Get the content of the section
        requirements_section = section_match.group(1)

        # Step 2: Extract the first few bullets from the "Requirements and Qualifications" section
        bullets = re.findall(
            r"^\s*(?:\d+\.\s*|\d+\)\s*|\*\s*|-+\s*|•\s*|–\s*|—\s*)(.*?)(?=\n|$)",
            requirements_section,
            re.MULTILINE
        )
        # We only need the first few bullets
        relevant_bullets = bullets[:5]

        # Step 3: Check for "years" or "months" in the bullets to capture experience information
        for bullet in relevant_bullets:
            experience_match = re.search(experience_pattern, bullet, re.IGNORECASE)
            if experience_match:
                # If both lower and upper limits are found, return them as a range
                if experience_match.group(2):
                    return [int(experience_match.group(1)), int(experience_match.group(2))]
                else:
                    return [int(experience_match.group(1)), -1]  # Single value, no range

    # Step 4: If no match in bullets, search the entire text
    experience_match = re.search(experience_pattern, jd_text, re.IGNORECASE)
    if experience_match:
        if experience_match.group(2):
            return [int(experience_match.group(1)), int(experience_match.group(2))]
        else:
            return [int(experience_match.group(1)), -1]  # Single value, no range
     # Step 5: If still no match, search with the lenient pattern in the entire text
    lenient_match = re.search(lenient_experience_pattern, jd_text, re.IGNORECASE)
    if lenient_match:
        if lenient_match.group(2):
            return [int(lenient_match.group(1)), int(lenient_match.group(2))]
        else:
            return [int(lenient_match.group(1)), -1]
    # If no match is found anywhere in the text
    return [1, -1]


import torch
import re
from sentence_transformers import SentenceTransformer, util
# Explicitly set device to CUDA if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("device_is: ",device)
# Load embedding model on the correct device
embedding_compare_model = SentenceTransformer('all-mpnet-base-v2', device=str(device))
def Score_technical_skills(jd_text, candidate_skills_list):

    jd_skills = set()
    for skill_key, canonical_skills in skills_dict.items():
        # Check if skill_key is in JD text
        if re.search(rf"\b{re.escape(skill_key)}\b", jd_text, re.IGNORECASE):
            print(skill_key)
            jd_skills.update(canonical_skills)  # Ensure canonical_skills is a list or set
    
    # Tokenization with special handling for technical skills
    def tokenize(text):
        # Preserve special characters for technical skills
        # Split by spaces, but keep special characters attached to words
        tokens = re.findall(r'[\w+#.]+', text)
        return [token.lower() for token in tokens]

    # Tokenize the job description
    tokens = tokenize(jd_text)

    # Second pass: Partial matching against tokens
    for token in tokens:
        for skill_key, canonical_skills in skills_dict.items():
            # Check if token is a substring of skill key or vice versa
            if token == skill_key.lower():
                jd_skills.update(canonical_skills)
    
    print(jd_skills)
    
    # Step 2: Normalize candidate skills
    candidate_skills = set()
    for skill in candidate_skills_list:
        normalized_skill = skill.lower()
        if normalized_skill in skills_dict:
            candidate_skills.update(skills_dict[normalized_skill])

    # Compute embeddings for both JD skills and candidate skills
    jd_skills_list = list(jd_skills)
    candidate_skills_list = list(candidate_skills)
    
    # Compute category mappings
    jd_categories = [
        skills_to_category.get(skill, skill)
        for skill in jd_skills_list
    ]
    candidate_categories = [
        skills_to_category.get(skill, skill)
        for skill in candidate_skills_list
    ]

    # Explicitly move embeddings to CUDA
    embeddings_jd = embedding_compare_model.encode(
        jd_skills_list, 
        convert_to_tensor=True, 
        device=device
    )
    embeddings_candidate = embedding_compare_model.encode(
        candidate_skills_list, 
        convert_to_tensor=True, 
        device=device
    )
    embeddings_jd_categories = embedding_compare_model.encode(
        jd_categories, 
        convert_to_tensor=True, 
        device=device
    )
    embeddings_candidate_categories = embedding_compare_model.encode(
        candidate_categories, 
        convert_to_tensor=True, 
        device=device
    )
    print("here333")
    # Compute cosine similarity (ensure on the same device)
    similarities = util.pytorch_cos_sim(embeddings_jd, embeddings_candidate)
    similarities_categories = util.pytorch_cos_sim(embeddings_jd_categories, embeddings_candidate_categories)

    # Display results and calculate the sum of max similarities
    sum_max_similarities = 0
    for i, comparison_skill in enumerate(jd_skills_list):
        max_similarity = similarities[i].max().item()  # Find the maximum similarity for this skill
        max_similarity_categories = similarities_categories[i].max().item()
        overall_max = max(max_similarity, 0.75 * max_similarity_categories)
        
        if max_similarity > 0.25:
            sum_max_similarities += min(1, overall_max)
        
        print(f"\nSimilarities for: {comparison_skill}")
        for j, cv_skill in enumerate(candidate_skills_list):
            print(f"  {cv_skill}: {similarities[i, j].item():.2f},  category match: {0.75*similarities_categories[i, j].item():.2f}")

    print("\nTotal sum of max similarity scores:", sum_max_similarities)
    overall_skill_score = (sum_max_similarities / len(jd_skills_list)) * 100
    print("Overall Skill Score:", overall_skill_score)
    return overall_skill_score

import ast
import re
from scipy.spatial.distance import cosine

def extract_job_role(text):
    """
    Extract the job role from a text response formatted as a dictionary.

    Args:
    text (str): A string containing the job role description

    Returns:
    str or None: The extracted job role
    """
    # Try to extract using regex pattern
    dict_pattern = r'\{primary role:\s*([^}]+)\}'
    match = re.search(dict_pattern, text, re.IGNORECASE)

    if match:
        return match.group(1).strip()

    # Fallback: try to extract from text before dictionary
    text_pattern = r'primary role.*?is\s+([^.]+)'
    text_match = re.search(text_pattern, text, re.IGNORECASE)

    if text_match:
        return text_match.group(1).strip()

    return None

def process_rag_result(query_result):
    """
    Process the RAG model query result to extract the job role

    Args:
    query_result (str): Full text response from the RAG model

    Returns:
    dict: Dictionary with the extracted job role
    """
    job_role = extract_job_role(query_result)

    if job_role:
        return {"primary role": job_role}

    return {"primary role": "Unknown"}
def calculate_bracketed_score(percentage):
            if percentage >= 60:
                return 100
            elif percentage >= 40:
                return 75
            elif percentage >= 20:
                return 50
            else:
                return 0
def overall_role_score(job_titles,required_role):
  extracted_job_role=process_rag_result(job_titles)
  # Encode embeddings with explicit device handling

  required_embedding = embedding_compare_model.encode(
      required_role, 
      convert_to_tensor=True
  )
  extracted_embedding = embedding_compare_model.encode(
      extracted_job_role['primary role'], 
      convert_to_tensor=True
  )

  # Ensure both embeddings are moved to CPU and converted to numpy
  required_embedding_np = required_embedding.cpu().numpy()
  extracted_embedding_np = extracted_embedding.cpu().numpy()

  # Verify shapes and types
  print("Required embedding shape:", required_embedding_np.shape)
  print("Extracted embedding shape:", extracted_embedding_np.shape)
  
  # Calculate cosine similarity using numpy arrays
  cosine_similarity = 1 - cosine(required_embedding_np, extracted_embedding_np)
  # Normalize similarity to percentage
  similarity_percentage = cosine_similarity * 100

  role_similarity_percentage = calculate_bracketed_score(similarity_percentage)
  print(extracted_job_role)
  print(role_similarity_percentage)
  return role_similarity_percentage
def score_contact_and_word_count(result,role_similarity_percentage):
    # Extract contact info and word count from the result
    contact_info = result.get("contact_info", {})
    word_count = result.get("word_count", 0)

    # Points for contact info (2 points for each: email, phone, linkedin, github)
    contact_points = 0
    required_fields = ['email', 'phone', 'linkedin', 'github']

    for field in required_fields:
        if field in contact_info:
            contact_points += 20  # Each field adds 2 points

    # Points for word count (2 points if word count is between 400 and 700)
    word_count_points = 0
    if 400 <= word_count <= 700:
        word_count_points = 20
    # Check if word count is within 100 words above or below the ideal range
    elif 300 <= word_count < 400 or 700 < word_count <= 800:
        word_count_points = 10
    # No points if outside these ranges
    else:
        word_count_points = 0

    total_points = contact_points + word_count_points
    total_points = (total_points + role_similarity_percentage)/2

    return total_points
# Get the score for contact info and word count by passing the entire result
# format_score = score_contact_and_word_count(result,role_similarity_percentage)

# print("Final Score for Contact Info and Word Count:", format_score)

def score_sales_index(result,impact_bullet_count):
    # Sales Index is based on unique action verbs in "Innovation" and "Technical" categories (max 10)
    action_verbs = result.get("detected_action_verbs", {})

    # Get the counts for "Innovation" and "Technical"
    innovation_verbs = action_verbs.get('Innovation', {}).get('unique_count', 0)
    technical_verbs = action_verbs.get('Technical', {}).get('unique_count', 0)
    innovation_repeat = action_verbs.get('Innovation', {}).get('total_count', 0)-innovation_verbs
    technical_repeat = action_verbs.get('Technical', {}).get('total_count', 0)-technical_verbs

    # Total Sales Index score is the sum of innovation and technical verbs
    total_verbs = innovation_verbs + technical_verbs +(innovation_repeat/2) + (technical_repeat/2)

    # Return the minimum of the total score or 10
    return min((total_verbs/7)*50,50) + min((impact_bullet_count/5)*50,50)

def score_soft_skills(result):
    # Soft skills are the rest of the action verbs that are not in "Technical" or "Innovation"
    action_verbs = result.get("detected_action_verbs", {})

    # Get the counts for "Leadership" and "Communication"
    leadership_verbs = action_verbs.get('Leadership', {}).get('unique_count', 0)
    communication_verbs = action_verbs.get('Communication', {}).get('unique_count', 0)

    # Total soft skills score is the sum of leadership and communication verbs
    total_soft_skills_score = leadership_verbs + communication_verbs

    # Return the minimum of the total score or 10
    return min((total_soft_skills_score/5)*100,100)

import math

def score_experience(experience, required_experience):
  """
  Calculates an experience score using a sigmoid function.

  Args:
    exp: The candidate's years of experience.
    required_experience: The required years of experience for the role.

  Returns:
    An integer score between 0 and 100 (inclusive).
  """
  score = 1 / (1 + math.exp(-experience + (required_experience)/2))
  return int(score * 100)

llm, embed_model = initialize_llm()

import os
import locale
import json
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import traceback
from flask_cors import CORS
from pyngrok import ngrok
import threading

# Set ngrok authentication token BEFORE using ngrok
# IMPORTANT: Replace with your actual authtoken


def calculate_ats_score(cv_path, jd_text, years_of_experience, role_name, custom_weights=None):
    # Default weights if not provided
    default_weights = {
        "Fresher": {"hard_skills": 0.45, "soft_skills": 0.1, "experience": 0.1, "format": 0.15, "sales_index": 0.15},
        "Associate": {"hard_skills": 0.4, "soft_skills": 0.1, "experience": 0.2, "format": 0.15, "sales_index": 0.15},
        "Experienced": {"hard_skills": 0.35, "soft_skills": 0.1, "experience": 0.2, "format": 0.15, "sales_index": 0.2},
        "Lead": {"hard_skills": 0.3, "soft_skills": 0.15, "experience": 0.2, "format": 0.15, "sales_index": 0.2},
        "Manager": {"hard_skills": 0.25, "soft_skills": 0.20, "experience": 0.25, "format": 0.1, "sales_index": 0.2}
    }

    # Determine role level based on years of experience
    if years_of_experience < 2:
        role_level = "Fresher"
    elif 2 <= years_of_experience < 3:
        role_level = "Associate"
    elif 3 <= years_of_experience < 5:
        role_level = "Experienced"
    elif 5 <= years_of_experience < 8:
        role_level = "Lead"
    else:
        role_level = "Manager"

    # Process custom weights
    if custom_weights is not None:
        # Check if input is a list/tuple of 5 values
        if isinstance(custom_weights, (list, tuple)) and len(custom_weights) == 5:
            # Validate that weights sum to 1 (with small tolerance for floating point)
            if abs(sum(custom_weights) - 1.0) > 1e-10:
                raise ValueError("Custom weights must sum to 1")

            # Create a custom weights dictionary for the specific role level
            custom_weights_dict = {
                role_level: {
                    "hard_skills": custom_weights[0],
                    "soft_skills": custom_weights[1],
                    "experience": custom_weights[2],
                    "format": custom_weights[3],
                    "sales_index": custom_weights[4]
                }
            }
            default_weights[role_level]=custom_weights_dict[role_level]
            # weights = custom_weights_dict
        elif isinstance(custom_weights, dict):
            # Keep existing dict-based input for backwards compatibility
            # weights = custom_weights
            default_weights[role_level]=custom_weights[role_level]
        else:
            raise ValueError("Custom weights must be a list/tuple of 5 values or a dictionary")

    print("CV path to calculate fn:", cv_path)
    cv_dir_path = os.path.dirname(cv_path)

    # Load CV documents
    documents = SimpleDirectoryReader(cv_dir_path).load_data()
    print(documents)

    # Create index and query engine
    index = VectorStoreIndex.from_documents(documents, embed_model=embed_model)
    query_engine = index.as_query_engine(llm=llm)

    # Extract various metrics
    current_year = datetime.now().year
    current_month = datetime.now().month
    current_month_name = datetime.now().strftime("%B")
    print("Here11")

    quantifiable_metrics = query_engine.query("Analyze the resume and count the number of instances of percentage change or cost reduction, or time saved as impact mentioned explicitely as numbers")
    experience_response = query_engine.query(f"calculate the years of professional experiecne of the candidate based on all the work experience mentioned ? Presently is {current_month_name} {current_year} ")
    skills = query_engine.query("list of all the technical skills of the candidate, only use work experince and projects as source of technical skills")
    job_titles = query_engine.query("Extract the cadidates primary role from summary or most recent work experience and output a python dictionay of format {primary role: Extracted role}?")
    print("Here22")

    impact_bullet_count = extract_relevant_bullets(str(quantifiable_metrics))
    candidate_skills_list = extract_skills(str(skills))

    # Extract overall experience
    exp = extract_overall_experience(str(experience_response))
    result = parse_resume(cv_path)
    exp_range = extract_experience_years(jd_text)
    overall_skill_score = Score_technical_skills(jd_text, candidate_skills_list)
    role_similarity_percentage = overall_role_score(str(job_titles), str(role_name))
    format_score = score_contact_and_word_count(result, role_similarity_percentage)

    # Example usage
    sales_index = score_sales_index(result, impact_bullet_count)
    soft_skills = score_soft_skills(result)
    experience_score = score_experience(exp, years_of_experience)

    print("Sales Index:", sales_index)
    print("Soft Skills:", soft_skills)
    print("Here33")

    category_weights = default_weights.get(role_level, default_weights["Fresher"])

    # Calculate the weighted overall score
    overall_score = (
        (category_weights["hard_skills"] * overall_skill_score) +
        (category_weights["soft_skills"] * soft_skills) +
        (category_weights["experience"] * experience_score) +
        (category_weights["format"] * format_score) +
        (category_weights["sales_index"] * sales_index)
    )
    print("Used weights: ",category_weights)
    print("ATS_Score: ", overall_score)
    print("Hard_Skill_Score: ", overall_skill_score)
    print("Soft_Skill_Score: ", soft_skills)
    print("Experience_Score: ", experience_score)
    print("Format_Score: ", format_score)
    print("Sales_Index: ", sales_index)

    return {
        "ATS Score": round(overall_score, 2),
        "Hard_Skill_Score": overall_skill_score,
        "Soft_Skill_Score": soft_skills,
        "Experience_Score": experience_score,
        "Format_Score": format_score,
        "Sales_Index": sales_index,
        "Role Level": role_level
    }
def process_name_query_response(query_response):
    print(str(query_response))
  
    """
    Process the query response to extract the name from a mixed-text format.
    Args:
        query_response (str): The response from the query engine
    Returns:
        dict: A dictionary with the extracted name, or {"name": ""} if no name found
    """
    try:
        # Remove any leading/trailing whitespace
        response = query_response.strip()
        # Look for the name within {} specifically
        name_match = re.search(r'\{name:\s*([^}]+)\}', response)
        if name_match:
            # Extract and clean the name
            name = name_match.group(1).strip()
            return {"name": name}
        # Fallback parsing if the above fails
        name_match = re.search(r'name:\s*"?([^"}\n]+)', response, re.IGNORECASE)
        if name_match:
            return {"name": name_match.group(1).strip()}
        # Return empty name if no name found
        return {"name": ""}
    except Exception as e:
        # Log the error or handle it as needed
        print(f"Error processing name query response: {e}")
        return {"name": ""}
def extract_profile(cv_path):
    print("CV path to calculate fn:", cv_path)
    cv_dir_path = os.path.dirname(cv_path)
    # Load CV documents
    documents = SimpleDirectoryReader(cv_dir_path).load_data()
    print(documents)
    # Create index and query engine
    index = VectorStoreIndex.from_documents(documents, embed_model=embed_model)
    query_engine = index.as_query_engine(llm=llm)
    job_titles = query_engine.query("Extract the cadidates primary role from summary or most recent work experience and output a python dictionay of format {primary role: Extracted role}?")
    name_query = query_engine.query("Extract the name of the candidate and output in format {name: Extracted name}")
    candidate_name =process_name_query_response(str(name_query))
    print(name_query)
    extracted_job_role=process_rag_result(str(job_titles))
    result = parse_resume(cv_path)
    return {
        "Name": candidate_name["name"],
        "Job Title": extracted_job_role,
        "Contact Info": result["contact_info"]
    }
# Flask Application Setup
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Configuration
app.config['UPLOAD_FOLDER'] = '/tmp/ats_scoring'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

@app.route('/', methods=['GET'])
def home():
    return jsonify({
        "message": "ATS Scoring API is running",
        "endpoints": {
            "ATS Score": "/ats-score (POST)",
            "Health Check": "/health (GET)"
        }
    }), 200

@app.route('/extract-profile', methods=['POST'])
def profile_extraction_endpoint():
    try:
        # Validate request contains CV file
        if 'cv_file' not in request.files:
            return jsonify({"error": "No CV file uploaded"}), 400
        cv_file = request.files['cv_file']
        # Validate file is selected and is a PDF
        if cv_file.filename == '':
            return jsonify({"error": "No selected file"}), 400
        if not cv_file.filename.lower().endswith('.pdf'):
            return jsonify({"error": "Only PDF files are allowed"}), 400
        # Secure filename and save
        filename = secure_filename(cv_file.filename)
        cv_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        cv_file.save(cv_path)
        try:
            # Extract profile using the extract_profile function
            profile_details = extract_profile(cv_path)
            # Return the extracted profile details
            return jsonify(profile_details), 200
        except Exception as extraction_error:
            # Log the extraction error
            traceback.print_exc()
            return jsonify({
                "error": "Failed to extract profile",
                "details": str(extraction_error)
            }), 422
        finally:
            # Always clean up the uploaded file, even if extraction fails
            if os.path.exists(cv_path):
                os.remove(cv_path)
    except Exception as e:
        # Log any unexpected errors
        traceback.print_exc()
        return jsonify({
            "error": "An unexpected error occurred during profile extraction",
            "details": str(e)
        }), 500
# Update the route to accept weights as a list
@app.route('/ats-score', methods=['POST'])
def ats_scoring_endpoint():
    try:
        # Validate request contains all required fields
        if 'cv_file' not in request.files:
            return jsonify({"error": "No CV file uploaded"}), 400

        cv_file = request.files['cv_file']

        # Validate file is PDF
        if cv_file.filename == '':
            return jsonify({"error": "No selected file"}), 400

        if not cv_file.filename.lower().endswith('.pdf'):
            return jsonify({"error": "Only PDF files are allowed"}), 400

        # Secure filename and save
        filename = secure_filename(cv_file.filename)
        cv_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        cv_file.save(cv_path)

        # Extract other required parameters
        jd_text = request.form.get('job_description', '')
        years_of_experience = float(request.form.get('years_of_experience', 0))
        role_name = request.form.get('role_name', '')

        # Optional custom weights
        custom_weights_str = request.form.get('custom_weights')
        custom_weights = None
        if custom_weights_str:
            try:
                # Try to parse as a list of floats
                custom_weights = [float(w.strip()) for w in custom_weights_str.split(',')]
            except ValueError:
                os.remove(cv_path)
                return jsonify({"error": "Invalid custom weights format. Must be comma-separated floats"}), 400

        # Validate required parameters
        if not jd_text:
            os.remove(cv_path)
            return jsonify({"error": "Job Description is required"}), 400

        # Run ATS scoring
        results = calculate_ats_score(
            cv_path,
            jd_text,
            years_of_experience,
            role_name,
            custom_weights
        )

        # Clean up the uploaded file
        os.remove(cv_path)

        return jsonify(results), 200

    except Exception as e:
        # Log the full error for server-side debugging
        traceback.print_exc()
        return jsonify({
            "error": "An error occurred during ATS scoring",
            "details": str(e)
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy"}), 200

def run_flask():
    # Set preferred encoding
    locale.getpreferredencoding = lambda: "UTF-8"

    # Run the Flask app on a specific host and port
    app.run(debug=False, host='0.0.0.0')

def main():
    try:
        # Explicitly specify the port and protocol
        public_url = ngrok.connect(
            addr="4000",  # Use string for port
            proto="http"  # Explicitly specify HTTP protocol
        )
        print(f"Public URL: {public_url}")

         # Start Flask in a separate thread
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.start()

         #Keep the main thread running
        flask_thread.join()

    except Exception as e:
        print(f"Error setting up ngrok tunnel: {e}")
        traceback.print_exc()

if __name__ == "__main__":
   app.run(debug=True,host='0.0.0.0',port=4000)

